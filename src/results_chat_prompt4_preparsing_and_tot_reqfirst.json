[
    {
        "Requirement": "The MapComponent shall support different types of map layers (e.g. terrain satellite)",
        "testObjective": "Verify that the MapComponent correctly displays and supports multiple map layers such as terrain and satellite.",
        "preconditions": [
            "The application must be running.",
            "The MapComponent is enabled and configured to support multiple layers."
        ],
        "testSteps": [
            "1. Open the application and ensure the MapComponent is visible.",
            "2. Add a terrain layer to the MapComponent.",
            "3. Add a satellite layer to the MapComponent.",
            "4. Verify that both layers are displayed correctly on the map.",
            "5. Modify the properties of a terrain layer (e.g. zoom level, pan, opacity)."
        ],
        "expectedResult": "The MapComponent displays and supports multiple map layers, and allows modification of layer properties without errors.",
        "testCaseID": 0,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)"
        ]
    },
    {
        "Requirement": "The MissionPlanner shall execute flight plans for multiple UAVs concurrently.",
        "testObjective": "Verify that the MissionPlanner can execute flight plans for multiple UAVs at the same time.",
        "preconditions": [
            "The application must be running.",
            "Multiple flight plans are available.",
            "Two or more UAVs are registered."
        ],
        "testSteps": [
            "1. Add two or more flight plans.",
            "2. Add two or more UAVs.",
            "3. Start the MissionPlanner to execute flight plans for all simultaneously.",
            "4. Observe if all flight plans are executed concurrently."
        ],
        "expectedResult": "All flight plans are executed for all registered UAVs concurrently without any delays.",
        "testCaseID": 1,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The MissionPlanner shall execute flight plans for multiple UAVs concurrently."
        ]
    },
    {
        "Requirement": "The GCS shall transmit the UAV's properties to the GCSMiddleware.",
        "testObjective": "Verify that the GCS transmits the UAV's properties to the GCSMiddleware.",
        "preconditions": [
            "The GCS must be configured to transmit properties to the GCSMiddleware.",
            "A UAV is connected to the GCS."
        ],
        "testSteps": [
            "1. Connect a UAV to the GCS.",
            "2. Configure the GCS to transmit properties to the GCSMiddleware.",
            "3. Initiate communication between GCS and GCSMiddleware.",
            "4. Send a command or status update.",
            "5. Verify that the GCSMiddleware receives the transmitted properties."
        ],
        "expectedResult": "The GCSMiddleware receives the UAV's properties, such as battery level, altitude, and speed.",
        "testCaseID": 2,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCS shall transmit the UAV's properties to the GCSMiddleware"
        ]
    },
    {
        "Requirement": "The GCS shall transmit the UAV's current location to the GCSMiddleware.",
        "testObjective": "Verify that the GCS transmits the UAV's current location to the GCSMiddleware.",
        "preconditions": [
            "The application must be running.",
            "A UAV is connected to the GCS."
        ],
        "testSteps": [
            "1. Add a flight plan for a UAV.",
            "2. Start the UAV's flight.",
            "3. Verify that the GCS sends the UAV's current location to the GCSMiddleware."
        ],
        "expectedResult": "The UAV's current location is transmitted to the GCSMiddleware.",
        "testCaseID": 3,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCS shall transmit the UAV's current location to the GCSMiddleware"
        ]
    },
    {
        "Requirement": "The GCS shall report newly connected UAVs to the GCSMiddleware.",
        "testObjective": "Verify that the GCS correctly reports newly connected UAVs to the GCSMiddleware.",
        "preconditions": [
            "The application must be running.",
            "A new UAV is connected to the GCS."
        ],
        "testSteps": [
            "1. Add a new UAV to the system.",
            "2. Observe if the GCS reports the new UAV to the GCSMiddleware.",
            "3. Verify that the GCS sends a notification to the GCSMiddleware upon connection."
        ],
        "expectedResult": "The GCS sends a notification to the GCSMiddleware upon a new UAV connection.",
        "testCaseID": 4,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCS shall report newly connected UAVs to the GCSMiddleware."
        ]
    },
    {
        "Requirement": "The GCS shall assign a message frequency for all UAVs.",
        "testObjective": "Verify that the GCS assigns a message frequency to all active UAVs.",
        "preconditions": [
            "The application must be running.",
            "One or more active UAVs are present."
        ],
        "testSteps": [
            "1. Start one or more active UAVs.",
            "2. Observe the GCS interface to ensure that each active UAV has a message frequency assigned."
        ],
        "expectedResult": "All active UAVs receive a message frequency assignment from the GCS.",
        "testCaseID": 5,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCS shall assign a message frequency for all UAVs."
        ]
    },
    {
        "Requirement": "When the GCS receives a UAV command from the GCSMiddleware, the GCS shall forward the command to the respective UAV.",
        "testObjective": "Verify that when a GCS command is received from GCSMiddleware, the GCS correctly forwards the command to the respective UAV.",
        "preconditions": [
            "The GCS is operational and connected to the GCSMiddleware",
            "A valid UAV is associated with the GCS"
        ],
        "testSteps": [
            "1. Ensure GCS is operational and connected to GCSMiddleware.",
            "2. Associate a valid UAV with the GCS.",
            "3. Send a command via GCSMiddleware.",
            "4. Wait for the command to be received and forwarded by GCS to the UAV.",
            "5. Verify that the command was received and forwarded by the respective UAV."
        ],
        "expectedResult": "Command is received by GCS and forwarded to the respective UAV.",
        "testCaseID": 6,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV."
        ]
    },
    {
        "Requirement": "When the connection to the GCS from the GCSMiddleware is lost the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.",
        "testObjective": "Verify that when the GCSMiddleware loses connection to the GCS Dronology is notified and all associated UAVs are deactivated.",
        "preconditions": [
            "The application must be running.",
            "A GCS is present and connected to the GCSMiddleware.",
            "A GCS is present and has associated UAVs active."
        ],
        "testSteps": [
            "1. Establish a connection between the GCS and GCSMiddleware.",
            "2. Simulate or cause the loss of connection between the GCS and GCSMiddleware.",
            "3. Wait until Dronology receives notification from GCSMiddleware.",
            "4. Verify that all associated UAVs are deactivated."
        ],
        "expectedResult": "Dronology receives a notification from GCSMiddleware and all associated UAVs are deactivated.",
        "additionalNotes": "It's important to ensure that the simulation of connection loss is accurate and that all associated UAVs are properly deactivated to ensure the test's validity.",
        "riskAssessment": "The test requires an accurate simulation of a loss of connection which may be challenging to implement and verify. Additionally ensuring that all associated UAVs are deactivated correctly without any unintended side effects is a critical aspect of the test's success.",
        "prioritizedSteps": [
            "Simulate or cause the loss of connection between the GCS and GCSMiddleware."
        ],
        "testEnvironment": "The test must be performed in an environment where the GCS is present and has associated active UAVs.",
        "testCaseID": 7,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs."
        ]
    },
    {
        "Requirement": "The GCSMiddleware shall forward commands sent from Dronology to a GCS.",
        "testObjective": "Verify that GCSMiddleware correctly forwards commands from Dronology to the GCS.",
        "preconditions": [
            "Dronology must send commands to GCSMiddleware",
            "GCS must be configured to receive commands"
        ],
        "testSteps": [
            "1. Send a command from Dronology to GCSMiddleware",
            "2. Verify that GCS receives the command",
            "3. Check if the command was processed by the GCS"
        ],
        "expectedResult": "Command is successfully forwarded from Dronology to GCS and processed.",
        "testCaseID": 8,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware shall forward commands sent from Dronology to a GCS"
        ]
    },
    {
        "Requirement": "The GCSMiddleware shall handle state messages, monitoring messages, and mode change messages received from a GCS.",
        "testObjective": "Verify that the GCSMiddleware correctly processes state, monitoring, and mode change messages from the GCS.",
        "preconditions": [
            "The application must be running.",
            "A GCS is connected to the system.",
            "The GCS sends state, monitoring, or mode change messages to the GCSMiddleware."
        ],
        "testSteps": [
            "1. Connect to GCS.",
            "2. Send a state message from GCS.",
            "3. Send a monitoring message from GCS.",
            "4. Send a mode change message from GCS.",
            "5. Verify that GCSMiddleware processes each message.",
            "6. Verify that GCSMiddleware triggers appropriate actions or events based on the messages."
        ],
        "expectedResult": "GCSMiddleware successfully processes state, monitoring, and mode change messages, triggering expected actions or events.",
        "testCaseID": 9,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS."
        ]
    },
    {
        "Requirement": "The GCSMiddleware shall follow a predefined set of steps to establish a connection between a GCS and Dronology.",
        "testObjective": "Verify that GCSMiddleware follows predefined steps to establish a connection between GCS and Dronology.",
        "preconditions": [
            "The application must be running.",
            "A GCS is connected to Dronology.",
            "The GCSMiddleware is active."
        ],
        "testSteps": [
            "1. The GCSMiddleware starts the connection process.",
            "2. The GCS sends a request to establish a connection.",
            "3. Dronology responds with a connection request.",
            "4. The GCSMiddleware waits for a response from Dronology.",
            "5. The GCSMiddleware confirms the connection is established."
        ],
        "expectedResult": "A successful connection between GCS and Dronology is established and confirmed by GCSMiddleware.",
        "testCaseID": 10,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology"
        ]
    },
    {
        "Requirement": "The GCSMiddleware shall handle multiple GCS.",
        "testObjective": "Verify that GCSMiddleware can manage multiple GCS instances.",
        "preconditions": [
            "The application must be running with multiple GCS instances connected to the system."
        ],
        "testSteps": [
            "1. Connect multiple GCS instances to the system.",
            "2. Trigger an action requiring GCSMiddleware to switch between GCS instances."
        ],
        "expectedResult": "GCSMiddleware successfully switches between GCS instances without errors.",
        "testCaseID": 11,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware shall handle multiple GCS"
        ]
    },
    {
        "Requirement": "The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component.",
        "testObjective": "Verify that the DronologyRuntimeMonitor receives messages from all Dronology components.",
        "preconditions": [
            "The DronologyRuntimeMonitor must be configured properly."
        ],
        "testSteps": [
            "1. Enable the DronologyRuntimeMonitor.",
            "2. Activate all Dronology components.",
            "3. Send a test message to each component.",
            "4. Check if the DronologyRuntimeMonitor receives all messages."
        ],
        "expectedResult": "All messages are received by the DronologyRuntimeMonitor.",
        "testCaseID": 12,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component"
        ]
    },
    {
        "Requirement": "When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients.",
        "testObjective": "Verify that when a new monitoring message is received, the DronologyRuntimeMonitor forwards the message to all subscribed clients.",
        "preconditions": [
            "The application must be running.",
            "There are one or more subscribed clients that should receive the monitoring message."
        ],
        "testSteps": [
            "1. Add a new monitoring message.",
            "2. As a user subscribe to one or more clients.",
            "3. Verify that the monitoring message is forwarded to all subscribed clients."
        ],
        "expectedResult": "The monitoring message is successfully forwarded to all subscribed clients through the DronologyRuntimeMonitor.",
        "testCaseID": 13,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients"
        ]
    },
    {
        "Requirement": "The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients.",
        "testObjective": "Verify that DronologyRuntimeMonitor retrieves and distributes monitoring messages to clients.",
        "preconditions": [
            "DronologyRuntimeMonitor is operational",
            "Monitoring messages are being generated by Dronology or GCS",
            "Clients are registered and connected to Dronology"
        ],
        "testSteps": [
            "1. Enable monitoring messages in DronologyRuntimeMonitor",
            "2. Generate monitoring message in either Dronology or GCS",
            "3. Verify that monitoring message is retrieved by DronologyRuntimeMonitor",
            "4. Verify that DronologyRuntimeMonitor sends notification to all registered clients"
        ],
        "expectedResult": "Monitoring message is successfully retrieved by DronologyRuntimeMonitor and distributed to all registered clients.",
        "testCaseID": 14,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients"
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall notify users when an emergency occurs.",
        "testObjective": "Verify that the RealTimeFlightUI sends an emergency notification to users when an emergency occurs.",
        "preconditions": [
            "The application must be running.",
            "A user is in an emergency situation."
        ],
        "testSteps": [
            "1. Trigger an emergency situation in the system.",
            "2. As a user is in the emergency situation, observe the RealTimeFlightUI.",
            "3. Verify that the RealTimeFlightUI sends an emergency notification.",
            "4. Verify that the emergency notification includes the necessary information about the emergency."
        ],
        "expectedResult": "The RealTimeFlightUI sends an emergency notification to the user with the necessary information when an emergency occurs.",
        "testCaseID": 15,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall notify users when an emergency occurs."
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.",
        "testObjective": "Verify that the RealTimeFlightUI allows users to follow one or multiple UAVs on the map.",
        "preconditions": [
            "The application must be running.",
            "The map view is initialized.",
            "One or more UAVs are active.",
            "The map view is configured to show active UAVs."
        ],
        "testSteps": [
            "1. Add one or more active UAVs.",
            "2. Open the RealTimeFlightUI.",
            "3. Verify that the map view displays all active UAVs.",
            "4. Add another active UAV.",
            "5. Verify that the map view updates to display all active UAVs.",
            "6. Try to follow a single active UAV.",
            "7. Try to follow multiple active UAVs simultaneously."
        ],
        "expectedResult": "The map view accurately displays all active UAVs, including the ability to follow one or multiple at the same time.",
        "testCaseID": 16,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map."
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall allow users to perform emergency operations (e.g., hovering multiple UAVs, sending multiple UAVs to home) to a group of UAVs.",
        "testObjective": "Verify that the RealTimeFlightUI allows users to perform emergency operations on a group of UAVs.",
        "preconditions": [
            "The application must be running.",
            "One or more UAVs are active and connected to the system."
        ],
        "testSteps": [
            "1. Add multiple active UAVs.",
            "2. As a user selects emergency operations (e.g., hover or send to home).",
            "3. Observe the UI displaying the emergency actions for the selected group.",
            "4. Verify that the system responds appropriately to the emergency commands for the group.",
            "5. Ensure that the UI accurately reflects the changes in the group's status.",
            "6. Confirm that the system maintains the correct emergency state for each UAV in the group."
        ],
        "expectedResult": "The RealTimeFlightUI successfully allows users to perform emergency operations on a group of UAVs, with the UI accurately reflecting the actions and system responses.",
        "testCaseID": 17,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs"
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.",
        "testObjective": "Verify that users can apply flight operations to one or more selected UAVs using the RealTimeFlightUI.",
        "preconditions": [
            "The application must be running.",
            "At least one UAV is active.",
            "Users have selected one or more UAVs via the UI."
        ],
        "testSteps": [
            "1. Ensure the RealTimeFlightUI is open.",
            "2. Select one or more active UAVs from the UI.",
            "3. Apply a flight operation to the selected UAVs.",
            "4. Verify that the flight operation is applied to the selected UAVs."
        ],
        "expectedResult": "Flight operations are successfully applied to the selected active UAVs.",
        "testCaseID": 18,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs."
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall display all currently active flight plans on the map.",
        "testObjective": "Verify that the RealTimeFlightUI displays all currently active flight plans on the map.",
        "preconditions": [
            "The application must be running.",
            "There are one or more flight plans active."
        ],
        "testSteps": [
            "1. Add flight plans to the system.",
            "2. Ensure flight plans are active.",
            "3. Verify that the RealTimeFlightUI displays all active flight plans on the map."
        ],
        "expectedResult": "All active flight plans are displayed on the map by the RealTimeFlightUI.",
        "testCaseID": 19,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall display all currently active flight plans on the map."
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall display the name and status of all currently activated UAVs.",
        "testObjective": "Verify that the RealTimeFlightUI displays all currently activated UAVs with their names and statuses.",
        "preconditions": [
            "The application must be running.",
            "At least one UAV is activated in the system."
        ],
        "testSteps": [
            "1. Activate one or more UAVs.",
            "2. Open the RealTimeFlightUI.",
            "3. Verify that all activated UAVs are displayed with their names and statuses."
        ],
        "expectedResult": "All activated UAVs are displayed with their names and statuses in the RealTimeFlightUI.",
        "testCaseID": 20,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall display the name and status of all currently activated UAVs"
        ]
    },
    {
        "Requirement": "When the RouteCreationUI is loaded, a list of all existing routes shall be displayed.",
        "testObjective": "Verify that upon loading the RouteCreationUI, all existing routes are displayed correctly.",
        "preconditions": [
            "The application must be fully initialized and all routes must be registered in the system."
        ],
        "testSteps": [
            "1. Launch the application and ensure the RouteCreationUI is accessible.",
            "2. Verify that the RouteCreationUI loads successfully.",
            "3. Check that the list of routes displayed in the RouteCreationUI includes all registered routes.",
            "4. Ensure that the displayed routes are accurate and up-to-date with the current route database.",
            "5. Test the responsiveness of the RouteCreationUI to refresh or reload actions if applicable."
        ],
        "expectedResult": "All existing routes are displayed correctly in the RouteCreationUI without omissions or discrepancies.",
        "testCaseID": 21,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the RouteCreationUI is loaded a list of all existing routes shall be displayed."
        ]
    },
    {
        "Requirement": "The RouteCreationUI shall allow a user to delete a route.",
        "testObjective": "Verify that the RouteCreationUI allows a user to delete a route.",
        "preconditions": [
            "The application must be running.",
            "At least one route exists in the RouteCreationUI."
        ],
        "testSteps": [
            "1. Open the RouteCreationUI.",
            "2. Select a route to delete from the list.",
            "3. Click the delete button.",
            "4. Verify that the selected route is removed from the list and displayed in the map."
        ],
        "expectedResult": "The selected route is successfully deleted from the RouteCreationUI and displayed in the map.",
        "testCaseID": 22,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall allow a user to delete a route."
        ]
    },
    {
        "Requirement": "The RouteCreationUI shall allow the user to create and modify a route.",
        "testObjective": "Verify that the RouteCreationUI allows users to create and modify routes.",
        "preconditions": [
            "The application must be running.",
            "A user has access to the RouteCreationUI."
        ],
        "testSteps": [
            "1. Open the RouteCreationUI.",
            "2. Add a new route by entering coordinates.",
            "3. Modify the route by adding waypoints.",
            "4. Save the route."
        ],
        "expectedResult": "User successfully creates and modifies a route in the RouteCreationUI.",
        "testCaseID": 23,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall allow the user to create and modify a route."
        ]
    },
    {
        "Requirement": "When requested, the RouteCreationUI shall send a newly created or modified route to Dronology.",
        "testObjective": "Verify that when a route is created or modified in the RouteCreationUI, the route is sent to Dronology.",
        "preconditions": [
            "The application must be running.",
            "The RouteCreationUI must be open and display a route for creation or modification."
        ],
        "testSteps": [
            "1. Open the RouteCreationUI.",
            "2. Create or modify a route in the UI.",
            "3. Wait for the route to be sent to Dronology."
        ],
        "expectedResult": "A newly created or modified route is successfully sent to Dronology via the RouteCreationUI.",
        "testCaseID": 24,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested  the RouteCreationUI shall send a newly created or modified route to dronology."
        ]
    },
    {
        "Requirement": "Each route shall include a unique ID, a textual description, and a set of waypoints, all of which are editable in the UI.",
        "testObjective": "Verify that each route has a unique ID, a textual description, waypoints, and that the waypoints are editable in the UI.",
        "preconditions": [
            "The application must be running.",
            "One or more routes must be created."
        ],
        "testSteps": [
            "1. Create at least two routes.",
            "2. Add a unique textual description and waypoints for each route.",
            "3. Verify that each route has a unique ID.",
            "4. Verify that each route's textual description is present and unique.",
            "5. Select a waypoint and ensure it is editable.",
            "6. Attempt to edit a waypoint and confirm the changes are saved.",
            "7. Verify that all routes are displayed correctly."
        ],
        "expectedResult": "All routes are correctly created, have unique IDs, descriptions, waypoints, and are editable in the UI.",
        "testCaseID": 25,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI."
        ]
    },
    {
        "Requirement": "The RouteCreationUI shall only accept valid altitude and speed values for waypoint.",
        "testObjective": "Verify that the RouteCreationUI rejects invalid altitude or speed values for waypoints.",
        "preconditions": [
            "The application must be running.",
            "The RouteCreationUI is open and displaying a valid route.",
            "A waypoint with invalid altitude or speed is created.",
            "Dronology is not sending any route updates at this moment."
        ],
        "testSteps": [
            "1. Open the RouteCreationUI.",
            "2. Create a waypoint with invalid altitude or speed.",
            "3. Observe if the RouteCreationUI rejects the invalid waypoint.",
            "4. If invalid, verify that Dronology is not modified as a result."
        ],
        "expectedResult": "The RouteCreationUI rejects the invalid waypoint without modifying Dronology.",
        "testCaseID": 26,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall only accept valid altitude and speed values for waypoint."
        ]
    },
    {
        "Requirement": "The RouteCreationUI shall distinguish between starting, ending, and intermediate waypoint markers.",
        "testObjective": "Verify that the RouteCreationUI correctly displays different waypoint types.",
        "preconditions": [
            "The application must be running.",
            "The RouteCreationUI is open and displaying a route creation form."
        ],
        "testSteps": [
            "1. In the RouteCreationUI, select 'Start Waypoint' option.",
            "2. Click 'Add' to create a starting waypoint.",
            "3. In the RouteCreationUI, select 'End Waypoint' option.",
            "4. Click 'Add' to create an ending waypoint.",
            "5. In the RouteCreationUI, select 'Intermediate Waypoint' option.",
            "6. Click 'Add' to create an intermediate waypoint."
        ],
        "expectedResult": "The starting waypoint is displayed with a distinct marker, the ending waypoint with another distinct marker, and the intermediate waypoint with a third distinct marker.",
        "testCaseID": 27,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers."
        ]
    },
    {
        "Requirement": "When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.",
        "testObjective": "Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.",
        "preconditions": [
            "The application must be running.",
            "One or more flight plans are pending."
        ],
        "testSteps": [
            "1. Add one or more flight plans.",
            "2. As a user cancel a flight plan.",
            "3. Wait until RouteAssignmentUI notifies Dronology."
        ],
        "expectedResult": "Flight plan is canceled and Dronology received notification from RouteAssignmentUI.",
        "testCaseID": 28,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology."
        ]
    },
    {
        "Requirement": "A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.",
        "testObjective": "Verify that a user can reorder routes or remove flight plans assigned to a UAV without causing issues when the flight has not started execution.",
        "preconditions": [
            "The application must have flight plans assigned to a UAV.",
            "Flight execution has not started for the assigned flight plan."
        ],
        "testSteps": [
            "1. Add flight plans to a UAV.",
            "2. Start a flight plan execution.",
            "3. Reorder a route or remove a flight plan from the UAV.",
            "4. Verify that the UI indicates successful reordering or removal."
        ],
        "expectedResult": "Flight plan reordering or removal is allowed without affecting flight execution.",
        "testCaseID": 29,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution."
        ]
    },
    {
        "Requirement": "When a UAV is selected, the RouteAssignmentUI shall display its active flight plans.",
        "testObjective": "Verify that when a UAV is selected, the RouteAssignmentUI displays its active flight plans.",
        "preconditions": [
            "The application must be running.",
            "At least one UAV is active.",
            "The RouteAssignmentUI is enabled."
        ],
        "testSteps": [
            "1. Launch a new mission.",
            "2. Activate a UAV.",
            "3. Select the UAV from the list.",
            "4. Ensure the RouteAssignmentUI is enabled."
        ],
        "expectedResult": "The RouteAssignmentUI displays a list of active flight plans for the selected UAV.",
        "testCaseID": 30,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans."
        ]
    },
    {
        "Requirement": "When requested by the user the RouteAssignmentUI shall display details about the selected UAV and its flight plans.",
        "testObjective": "Verify that when a user requests the display of details about a selected UAV and its flight plans, the RouteAssignmentUI shows the correct information.",
        "preconditions": [
            "The application must be running.",
            "A selected UAV with flight plans must be active.",
            "The user has requested to display the details."
        ],
        "testSteps": [
            "1. Activate a selected UAV with flight plans.",
            "2. As a user request to display details about the selected UAV and its flight plans.",
            "3. Verify that the RouteAssignmentUI displays the selected UAV's details and its flight plans."
        ],
        "expectedResult": "The RouteAssignmentUI correctly displays the selected UAV's details and its associated flight plans.",
        "testCaseID": 31,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans."
        ]
    },
    {
        "Requirement": "When a route is assigned or removed from a UAV the RouteAssignmentUI shall notify Dronology.",
        "testObjective": "Verify that when a route is assigned or removed from a UAV the RouteAssignmentUI notifies Dronology.",
        "preconditions": [
            "The application must be running.",
            "At least one route must be assigned to a UAV or be removed from a UAV."
        ],
        "testSteps": [
            "1. Add a route to a UAV.",
            "2. Remove the route from the UAV.",
            "3. Verify that RouteAssignmentUI notifies Dronology."
        ],
        "expectedResult": "The RouteAssignmentUI sends notifications to Dronology upon assignment or removal of a route from a UAV.",
        "testCaseID": 32,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology."
        ]
    },
    {
        "Requirement": "The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.",
        "testObjective": "Verify that the RouteAssignmentUI provides a means to select and assign routes to a UAV.",
        "preconditions": [
            "The application must be running.",
            "At least one route exists in the RouteCreationUI.",
            "At least one UAV is active.",
            "The RouteAssignmentUI is active."
        ],
        "testSteps": [
            "1. Open the RouteCreationUI and create at least one route.",
            "2. Open the RouteAssignmentUI and ensure it is active.",
            "3. Select a route from the RouteCreationUI.",
            "4. Select a UAV from the list of active UAVs.",
            "5. Assign the selected route to the selected UAV.",
            "6. Verify that the assigned route is displayed in the RouteAssignmentUI."
        ],
        "expectedResult": "The RouteAssignmentUI has successfully assigned the selected route to the selected UAV.",
        "testCaseID": 33,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV."
        ]
    },
    {
        "Requirement": "When loading the map view it shall be positioned at the pre-defined location",
        "testObjective": "Verify that the map view is positioned correctly upon loading.",
        "preconditions": [
            "The application must be running.",
            "A pre-defined location is specified for the map view."
        ],
        "testSteps": [
            "1. Launch the application.",
            "2. Load the map view.",
            "3. Verify that the map view is positioned at the specified location."
        ],
        "expectedResult": "The map view is correctly positioned according to the specified location.",
        "testCaseID": 34,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When loading the map view it shall be positioned at the pre-defined location"
        ]
    },
    {
        "Requirement": "When the VaadinUI is activated, the VaadinUI shall be configured according to stored configuration parameters.",
        "testObjective": "Verify that when the VaadinUI is activated, it correctly applies the stored configuration parameters.",
        "preconditions": [
            "The application must be running.",
            "The VaadinUI has the correct configuration parameters stored."
        ],
        "testSteps": [
            "1. Activate the VaadinUI.",
            "2. Verify that the VaadinUI displays the correct configuration parameters.",
            "3. Manually update a configuration parameter.",
            "4. Verify that the VaadinUI reflects the updated configuration parameter."
        ],
        "expectedResult": "The VaadinUI displays the correct configuration parameters as configured in the stored configuration when activated.",
        "testCaseID": 35,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters."
        ]
    },
    {
        "Requirement": "The UIMiddleware shall accept and activate a mission plan upon request.",
        "testObjective": "Verify that the UIMiddleware accepts and activates a mission plan when requested.",
        "preconditions": [
            "The application must be running.",
            "A mission plan must be available in the system."
        ],
        "testSteps": [
            "1. Add a mission plan.",
            "2. Request the activation of the mission plan.",
            "3. Verify that the UIMiddleware activates the mission plan and triggers the necessary actions."
        ],
        "expectedResult": "The UIMiddleware successfully accepts and activates the mission plan as per the request.",
        "testCaseID": 36,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall accept and activate a mission plan upon request."
        ]
    },
    {
        "Requirement": "The UIMiddleware shall enable an existing route to be assigned to an active UAV.",
        "testObjective": "Verify that the UIMiddleware can assign an existing route to an active UAV.",
        "preconditions": [
            "The application must be running.",
            "At least one active UAV is connected.",
            "At least one existing route is available."
        ],
        "testSteps": [
            "1. Activate an existing route.",
            "2. Select an active UAV.",
            "3. Assign the route to the selected UAV using the UIMiddleware.",
            "4. Verify that the route has been assigned to the UAV and is active."
        ],
        "expectedResult": "The route is successfully assigned to the active UAV, and the assignment is reflected in the system state.",
        "testCaseID": 37,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall enable an existing route to be assigned to an active UAV."
        ]
    },
    {
        "Requirement": "The UIMiddleware shall enable the creation and modification of flight routes.",
        "testObjective": "Verify that the UIMiddleware allows users to create and modify flight routes.",
        "preconditions": [
            "The application must be running.",
            "Flight routes exist in the system."
        ],
        "testSteps": [
            "1. Create a new flight route.",
            "2. Modify an existing flight route.",
            "3. Submit both creation and modification for validation."
        ],
        "expectedResult": "Flight routes are successfully created and modified and validated by the UIMiddleware.",
        "testCaseID": 38,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall enable the creation and modification of flight routes"
        ]
    },
    {
        "Requirement": "The UIMiddleware accepts commands from UIs and forwards to Dronology.",
        "testObjective": "Verify that the UIMiddleware correctly forwards commands from UIs to Dronology.",
        "preconditions": [
            "The application must be running.",
            "At least one UI is requesting a command.",
            "Dronology is operational and ready to receive commands."
        ],
        "testSteps": [
            "1. Add a command from a UI component.",
            "2. Verify that the UIMiddleware receives the command.",
            "3. Verify that Dronology receives the command and executes it."
        ],
        "expectedResult": "The command is correctly forwarded from UI to Dronology and executed.",
        "testCaseID": 39,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware accepts commands from UIs and forwards to Dronology"
        ]
    },
    {
        "Requirement": "The UIMiddleware shall provide a list of all existing routes.",
        "testObjective": "Verify that the UIMiddleware displays a complete list of all existing routes.",
        "preconditions": [
            "The application must be running.",
            "The routes must have been created and saved successfully."
        ],
        "testSteps": [
            "1. Load the application.",
            "2. Verify that the UIMiddleware is active.",
            "3. Click on the UIMiddleware interface to display routes.",
            "4. Observe that all existing routes are listed.",
            "5. Ensure that new routes added after this step are not included in the current list."
        ],
        "expectedResult": "The UIMiddleware shows a complete and accurate list of all routes created so far.",
        "testCaseID": 40,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall provide a list of all existing routes"
        ]
    },
    {
        "Requirement": "The UIMiddleware shall provide a list of all active UAVs.",
        "testObjective": "Verify that the UIMiddleware provides a list of all active UAVs.",
        "preconditions": [
            "The application must be running.",
            "There are active UAVs in the system."
        ],
        "testSteps": [
            "1. Add active UAVs.",
            "2. Verify that the UIMiddleware displays all active UAVs."
        ],
        "expectedResult": "The UIMiddleware displays a list of all active UAVs.",
        "testCaseID": 41,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall provide a list of all active UAVs"
        ]
    },
    {
        "Requirement": "The ActivityLogger shall log all commands sent to and messages received from a CGS.",
        "testObjective": "Verify that the ActivityLogger logs all commands sent to and messages received from the CGS.",
        "preconditions": [
            "The application must be running.",
            "A CGS is present in the system."
        ],
        "testSteps": [
            "1. Initiate a command to the CGS.",
            "2. Verify that the ActivityLogger logs the command.",
            "3. Send a message to the CGS.",
            "4. Verify that the ActivityLogger logs the message."
        ],
        "expectedResult": "All commands and messages are logged by the ActivityLogger.",
        "testCaseID": 42,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The ActivityLogger shall log all commands sent to and messages received from a CGS."
        ]
    },
    {
        "Requirement": "The ActivityLogger shall log all flight plan related events.",
        "testObjective": "Verify that the ActivityLogger logs all flight plan related events.",
        "preconditions": [
            "The application must be running.",
            "Flight plans are active and being executed."
        ],
        "testSteps": [
            "1. Enable the ActivityLogger.",
            "2. Create or activate flight plans.",
            "3. Initiate flight execution.",
            "4. Observe the ActivityLogger output for flight plan related events."
        ],
        "expectedResult": "Flight plan related events are logged by the ActivityLogger.",
        "testCaseID": 43,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The ActivityLogger shall log all flight plan related events."
        ]
    },
    {
        "Requirement": "The InternalSimulator shall approximate the state of the battery.",
        "testObjective": "Verify that the InternalSimulator accurately approximates the battery state of a UAV.",
        "preconditions": [
            "The application must be running.",
            "One or more active UAVs with battery data."
        ],
        "testSteps": [
            "1. Activate a UAV.",
            "2. Monitor the battery level.",
            "3. Initiate the InternalSimulator.",
            "4. Observe the approximated battery state.",
            "5. Verify the approximated state is close to actual battery level."
        ],
        "expectedResult": "The approximated battery state closely mirrors the actual battery level of the active UAV.",
        "testCaseID": 44,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The InternalSimulator shall approximate the state of the battery"
        ]
    },
    {
        "Requirement": "When given a landing command the InternalSimulator shall move the UAV from its current position to the ground altitude corresponding to its current longitude and latitude.",
        "testObjective": "Verify that when a landing command is given, the InternalSimulator moves the UAV to the correct ground altitude based on its current location.",
        "preconditions": [
            "The application must have a current position of the UAV recorded.",
            "A landing command has been issued to the UAV."
        ],
        "testSteps": [
            "1. Ensure the UAV is at a known longitude and latitude.",
            "2. Send a landing command to the InternalSimulator.",
            "3. Wait for the InternalSimulator to adjust the UAV's position to ground altitude based on its current longitude and latitude."
        ],
        "expectedResult": "The UAV is successfully moved to ground altitude corresponding to its current location.",
        "testCaseID": 45,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude."
        ]
    },
    {
        "testCaseID": 46,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached."
        ]
    },
    {
        "Requirement": "When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.",
        "testObjective": "Verify that the InternalSimulator correctly moves the UAV to the specified takeoff altitude based on its current location.",
        "preconditions": [
            "The application must be running.",
            "A takeoff command has been issued.",
            "The UAV has a defined current longitude and latitude."
        ],
        "testSteps": [
            "1. Ensure the application is running.",
            "2. Issue a takeoff command to the UAV.",
            "3. Verify that the UAV's current longitude and latitude are known.",
            "4. Check if the InternalSimulator has been initialized.",
            "5. Observe if the InternalSimulator moves the UAV to the specified takeoff altitude."
        ],
        "expectedResult": "The InternalSimulator successfully moves the UAV to the correct takeoff altitude corresponding to its current location.",
        "testCaseID": 47,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude."
        ]
    },
    {
        "Requirement": "The InternalSimulator shall approximate the behavior of a UAV.",
        "testObjective": "Verify that the InternalSimulator accurately replicates the behavior of a real UAV.",
        "preconditions": [
            "The application must be running.",
            "One or more simulated flight routes are defined.",
            "A UAV is selected to simulate."
        ],
        "testSteps": [
            "1. Add a flight plan for a simulated UAV.",
            "2. Initiate flight simulation mode.",
            "3. Observe the simulated UAV's behavior in flight.",
            "4. Verify that the simulated behavior matches expected UAV characteristics such as altitude, speed, and waypoint transitions."
        ],
        "expectedResult": "The simulated UAV's behavior accurately matches the expected characteristics of a real UAV.",
        "testCaseID": 48,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The InternalSimulator shall approximate the behavior of a UAV."
        ]
    },
    {
        "Requirement": "The UAVRegistrationManager shall store UAV meta-data information such as the UAV's technical characteristics.",
        "testObjective": "Verify that the UAVRegistrationManager correctly stores technical characteristics of the UAV.",
        "preconditions": [
            "The application must be running.",
            "A new UAV registration form must be available for input.",
            "The technical characteristics of the UAV must be provided by the user."
        ],
        "testSteps": [
            "1. Open the UAV registration form.",
            "2. Enter the necessary technical characteristics of the UAV.",
            "3. Submit the form to register the UAV.",
            "4. Verify that the UAV's technical characteristics are stored in the system's database."
        ],
        "expectedResult": "The UAV's technical characteristics are successfully stored in the system's database.",
        "testCaseID": 49,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics"
        ]
    },
    {
        "Requirement": "When the maximum numbers of allowed activated UAVs has been reached, the UAVActivationManager shall reject any further activation requests.",
        "testObjective": "Verify that the UAVActivationManager rejects any activation requests when the maximum number of allowed activated UAVs has been reached.",
        "preconditions": [
            "The application must be running.",
            "The current number of activated UAVs is equal to the maximum allowed number."
        ],
        "testSteps": [
            "1. Activate a certain number of UAVs up to the maximum allowed.",
            "2. Attempt to activate one more UAV.",
            "3. Verify that the activation request is rejected by the UAVActivationManager."
        ],
        "expectedResult": "The activation request is rejected because the maximum number of allowed activated UAVs has been reached.",
        "testCaseID": 50,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests."
        ]
    },
    {
        "Requirement": "When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans.",
        "testObjective": "Verify that when a UAV is deactivated, all current and scheduled flight plans are canceled by the UAVActivationManager.",
        "preconditions": [
            "The application must be running.",
            "One or more current flight plans exist.",
            "One or more scheduled flight plans exist."
        ],
        "testSteps": [
            "1. Add one or more current flight plans.",
            "2. Deactivate a UAV.",
            "3. Verify that all current flight plans are canceled.",
            "4. Verify that all scheduled flight plans are canceled."
        ],
        "expectedResult": "All current and scheduled flight plans are successfully canceled when the UAV is deactivated.",
        "testCaseID": 51,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans"
        ]
    },
    {
        "Requirement": "The VehicleCore shall support virtual UAVs.",
        "testObjective": "Verify that the VehicleCore supports virtual UAVs.",
        "preconditions": [
            "The application must be running.",
            "At least one virtual UAV is created."
        ],
        "testSteps": [
            "1. Create a virtual UAV.",
            "2. Verify that the Virtual UAV is supported by the VehicleCore."
        ],
        "expectedResult": "The virtual UAV is supported by the VehicleCore.",
        "testCaseID": 52,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall support virtual UAVs"
        ]
    },
    {
        "Requirement": "The VehicleCore shall support UAVs connected via the GCS.",
        "testObjective": "Verify that the VehicleCore supports UAVs connected via the GCS.",
        "preconditions": [
            "The application must be running.",
            "One or more UAVs are connected via the GCS."
        ],
        "testSteps": [
            "1. Connect a UAV to the GCS.",
            "2. Launch the UAV.",
            "3. Verify that the VehicleCore acknowledges the connection and processes UAV data via the GCS."
        ],
        "expectedResult": "The VehicleCore successfully processes data from the connected UAV via the GCS.",
        "testCaseID": 53,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall support UAVs connected via the GCS"
        ]
    },
    {
        "Requirement": "When a group of UAVs are assigned flight patterns as part of a mission, the system shall provide a warning if any paths overlap.",
        "testObjective": "Verify that when a group of UAVs are assigned flight patterns, the system detects and warns of overlapping paths.",
        "preconditions": [
            "The application must be running.",
            "Multiple flight patterns (routes) are assigned to different UAVs.",
            "UAVs are part of the same mission group."
        ],
        "testSteps": [
            "1. Add multiple flight patterns for different UAVs.",
            "2. Activate the mission group.",
            "3. Observe the system for any warnings about overlapping paths."
        ],
        "expectedResult": "The system detects overlapping flight paths between assigned routes and issues a warning.",
        "testCaseID": 54,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap."
        ]
    },
    {
        "Requirement": "If requested, the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV.",
        "testObjective": "Verify that when the SingleUAVFlightPlanScheduler is requested to abort a flight plan, it correctly terminates the execution of that flight plan.",
        "preconditions": [
            "The application must be in a state where a flight plan is currently executing.",
            "The SingleUAVFlightPlanScheduler is activated to abort the flight plan."
        ],
        "testSteps": [
            "1. Activate the SingleUAVFlightPlanScheduler to abort a flight plan.",
            "2. Wait for the flight plan to be aborted.",
            "3. Verify that the flight plan is no longer active and that all associated tasks or processes are terminated."
        ],
        "expectedResult": "Flight plan execution is aborted successfully, and associated tasks or processes are terminated.",
        "testCaseID": 55,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV"
        ]
    },
    {
        "Requirement": "If a UAV does not have any pending flight plans then when it reaches the final waypoint of its current flight plan the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.",
        "testObjective": "Verify that when a UAV completes its current flight plan and has no pending tasks the SingleUAVFlightPlanScheduler notifies it to hover.",
        "preconditions": [
            "The application must be running.",
            "A single UAV is in the air with a completed flight plan.",
            "There are no pending flight plans for this UAV."
        ],
        "testSteps": [
            "1. Ensure a single UAV is in the air.",
            "2. Confirm that its flight plan has been completed.",
            "3. Verify that there are no pending flight plans assigned to this UAV.",
            "4. Initiate a check with the SingleUAVFlightPlanScheduler to ensure it triggers a hover notification.",
            "5. Wait for a confirmation that the UAV is hovering.",
            "6. Verify that the hover notification was sent by the SingleUAVFlightPlanScheduler."
        ],
        "expectedResult": "The SingleUAVFlightPlanScheduler correctly notifies the UAV to hover in place after completing its current flight plan with no pending tasks.",
        "testCaseID": 56,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place."
        ]
    },
    {
        "Requirement": "If a scheduled flight is not manually assigned to a UAV, the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV.",
        "testObjective": "Verify that when a flight route is not manually assigned, the SingleUAVFlightPlanScheduler automatically assigns it to an available UAV.",
        "preconditions": [
            "The application must be running.",
            "A flight route is added to the system.",
            "No active flight plan is assigned to any UAV.",
            "At least one UAV is available for assignment."
        ],
        "testSteps": [
            "1. Add a flight route without assigning it to any UAV.",
            "2. Ensure that no active flight plan exists for any UAV.",
            "3. Verify that the SingleUAVFlightPlanScheduler automatically assigns the route to an available UAV.",
            "4. Confirm that the assigned UAV receives the necessary commands to execute the flight plan."
        ],
        "expectedResult": "The route is automatically assigned to an available UAV, and the flight proceeds without issues.",
        "testCaseID": 57,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV"
        ]
    },
    {
        "testCaseID": 58,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV."
        ]
    },
    {
        "Requirement": "When requested the SingleUAVFlightPlanScheduler shall schedule a route for execution.",
        "testObjective": "Verify that when the SingleUAVFlightPlanScheduler is instructed to schedule a route the application successfully assigns and executes the route.",
        "preconditions": [
            "The application must be in a state where a route is requested for scheduling.",
            "At least one active flight plan exists.",
            "The route contains waypoints with valid coordinates and altitude specifications."
        ],
        "testSteps": [
            "1. Add a new flight route with waypoints and altitude specifications.",
            "2. Activate the SingleUAVFlightPlanScheduler to schedule the route.",
            "3. Wait for the route to be scheduled and assigned to an UAV.",
            "4. Verify that the scheduled route is being executed by the UAV."
        ],
        "expectedResult": "The route is successfully scheduled and assigned to an active UAV, and the UAV is executing the route as per the scheduler.",
        "testCaseID": 59,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution."
        ]
    },
    {
        "Requirement": "When requested, if a mission is currently active, the MissionPlanner shall cancel the active mission.",
        "testObjective": "Verify that when a mission is active, the MissionPlanner cancels it upon request.",
        "preconditions": [
            "The application must be running.",
            "A mission is currently active."
        ],
        "testSteps": [
            "1. Add a mission.",
            "2. Request to cancel the active mission.",
            "3. Verify that the MissionPlanner cancels the active mission."
        ],
        "expectedResult": "Upon requesting to cancel, the MissionPlanner successfully cancels the currently active mission.",
        "testCaseID": 60,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission."
        ]
    },
    {
        "Requirement": "The MissionPlanner shall manage predefined FlightPatterns.",
        "testObjective": "Verify that the MissionPlanner manages predefined FlightPatterns.",
        "preconditions": [
            "The application must be running.",
            "FlightPatterns must be predefined."
        ],
        "testSteps": [
            "1. Add FlightPattern.",
            "2. Modify FlightPattern.",
            "3. Remove FlightPattern.",
            "4. Retrieve FlightPattern.",
            "5. Delete FlightPattern."
        ],
        "expectedResult": "FlightPatterns are added, modified, removed, retrieved, and deleted as required.",
        "testCaseID": 61,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The MissionPlanner shall manage predefined FlightPatterns"
        ]
    },
    {
        "Requirement": "When a flight plan is activated for a UAV currently on the ground, the FlightSchedulingandExecution module shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.",
        "testObjective": "Verify that when a flight plan is activated for a ground-based UAV, the FlightSchedulingandExecution module sends takeoff instructions to the UAV until it reaches the target altitude.",
        "preconditions": [
            "The application is running.",
            "A flight plan is activated for a UAV that is currently on the ground.",
            "A takeoff altitude is specified in the flight plan."
        ],
        "testSteps": [
            "1. Add a flight plan to a UAV that is on the ground.",
            "2. Activate the flight plan.",
            "3. Monitor the FlightSchedulingandExecution module's output to verify that takeoff instructions are sent to the UAV until it reaches the target altitude."
        ],
        "expectedResult": "The FlightSchedulingandExecution module successfully sends takeoff instructions, and the UAV transitions to the prescribed altitude without issues.",
        "testCaseID": 62,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude."
        ]
    },
    {
        "Requirement": "If a flight plan is active and the hover in place command is rescinded, the FlightManager shall notify the UAV to continue to the originally designated waypoint.",
        "testObjective": "Verify that when the hover in place command is rescinded, the FlightManager correctly directs the UAV to continue its flight plan.",
        "preconditions": [
            "The application must be running.",
            "One or more active flight plans exist for a UAV.",
            "The hover in place command is rescinded for the active flight plan."
        ],
        "testSteps": [
            "1. Add an active flight plan for a UAV.",
            "2. Issue a hover in place command for the active flight plan.",
            "3. Resind the hover in place command for the active flight plan.",
            "4. Wait for the FlightManager to notify the UAV to continue to the originally designated waypoint."
        ],
        "expectedResult": "The FlightManager triggers a notification for the UAV to continue to the next waypoint along its flight plan.",
        "testCaseID": 63,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint."
        ]
    },
    {
        "Requirement": "When a flight route is assigned to a UAV which is currently hovering in place, the FlightManager shall assign the route and maintain the hover in place mode.",
        "testObjective": "Verify that when a flight route is assigned to a hovering UAV, the FlightManager correctly assigns the route and keeps the hover mode active.",
        "preconditions": [
            "The flight route must be assigned to a hovering UAV.",
            "The UAV is in hover mode when the route is assigned."
        ],
        "testSteps": [
            "1. Create a flight route for a UAV that is currently hovering in place.",
            "2. Assign the flight route to the same UAV.",
            "3. Observe if the FlightManager maintains the hover mode and executes the route.",
            "4. Verify that the hover mode continues until the route is completed."
        ],
        "expectedResult": "The flight route is assigned to the hovering UAV, and the hover mode is maintained while executing the route.",
        "testCaseID": 64,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode."
        ]
    },
    {
        "Requirement": "When the hover in place command is issued the FlightManager shall halt the UAV in place and maintain its current position.",
        "testObjective": "Verify that when a hover in place command is issued the FlightManager stops the UAV at its current position.",
        "preconditions": [
            "The application must be running.",
            "A hover in place command is issued to a UAV that is currently in flight."
        ],
        "testSteps": [
            "1. Initiate a hover in place command for a UAV in flight.",
            "2. Monitor the FlightManager to ensure it halts the UAV.",
            "3. Verify that the UAV remains at its current position after the command is processed."
        ],
        "expectedResult": "The UAV is halted at its current position upon receiving the hover in place command.",
        "additionalNotes": "Ensure that the command is correctly processed and that the system does not attempt to move the UAV once it is in place.",
        "testCaseID": 65,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position."
        ]
    },
    {
        "Requirement": "When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.",
        "testObjective": "Verify that the CoordinateSystem correctly calculates the direction from the first coordinate to the second coordinate.",
        "preconditions": [
            "The application must be running.",
            "Two valid coordinate pairs must be provided."
        ],
        "testSteps": [
            "1. Add two valid coordinates.",
            "2. Enter the first coordinate as source.",
            "3. Enter the second coordinate as destination.",
            "4. Calculate the direction from source to destination.",
            "5. Verify the computed direction is correct."
        ],
        "expectedResult": "The direction from the first coordinate to the second coordinate is accurately calculated and displayed.",
        "testCaseID": 66,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate."
        ]
    },
    {
        "Requirement": "When given two coordinates the CoordinateSystem shall compute the distance between them.",
        "testObjective": "Verify that the CoordinateSystem accurately computes the distance between two given coordinates.",
        "preconditions": [
            "The application must be running.",
            "Two distinct coordinates must be provided."
        ],
        "testSteps": [
            "1. Enter the first coordinate.",
            "2. Enter the second coordinate.",
            "3. Click on 'Compute Distance' button.",
            "4. Verify the computed distance displays correctly."
        ],
        "expectedResult": "The computed distance between the two coordinates is accurate and displayed correctly.",
        "testCaseID": 67,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When given two coordinates the CoordinateSystem shall compute the distance between them."
        ]
    },
    {
        "Requirement": "When requested, the CoordinateSystem shall transform coordinates to alternate formats.",
        "testObjective": "Verify that the CoordinateSystem correctly transforms coordinates to alternate formats when requested.",
        "preconditions": [
            "The application must be running.",
            "A CoordinateSystem exists and is configured to transform coordinates."
        ],
        "testSteps": [
            "1. Add a request for coordinate transformation.",
            "2. Provide input coordinates in original format.",
            "3. Verify that the output coordinates are in the alternate format.",
            "4. Check that transformation calculations are accurate and consistent."
        ],
        "expectedResult": "The CoordinateSystem successfully transforms the input coordinates to the alternate format as expected.",
        "testCaseID": 68,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested  the CoordinateSystem shall transform coordinates to alternate formats."
        ]
    },
    {
        "Requirement": "When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude it shall be specified in the flight route.",
        "testObjective": "Verify that when a flight route requires a customized takeoff altitude different from the system's default, the takeoff altitude is specified in the flight route.",
        "preconditions": [
            "The application must be running.",
            "A flight route requires a customized takeoff altitude different from the system's default takeoff altitude."
        ],
        "testSteps": [
            "1. Create a flight route that requires a customized takeoff altitude higher than the system's default.",
            "2. Execute the flight route.",
            "3. Verify that the takeoff altitude specified in the flight route matches the customized altitude used during takeoff."
        ],
        "expectedResult": "The flight route correctly specifies the customized takeoff altitude used during takeoff.",
        "testCaseID": 69,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route."
        ]
    },
    {
        "Requirement": "The FlightRouteManager shall persist flight routes.",
        "testObjective": "Verify that flight routes are persisted correctly.",
        "preconditions": [
            "The application must be running.",
            "Flight routes must be added to the FlightRouteManager."
        ],
        "testSteps": [
            "1. Add a flight route to the FlightRouteManager.",
            "2. Remove the flight route from its original source.",
            "3. Verify that the flight route exists in the FlightRouteManager."
        ],
        "expectedResult": "Flight route is correctly persisted in the FlightRouteManager.",
        "testCaseID": 70,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The FlightRouteManager shall persist flight routes."
        ]
    },
    {
        "testCaseID": 71,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}."
        ]
    },
    {
        "Requirement": "When the return to home command is issued, the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.",
        "testObjective": "Verify that when the return to home command is issued, the FlightManager correctly returns the UAV to its original launch location without sending additional waypoints or routing commands.",
        "preconditions": [
            "The application must be running.",
            "A UAV is currently in flight.",
            "The original launch location is known and recorded.",
            "The return to home command has been issued and processed by the FlightManager."
        ],
        "testSteps": [
            "1. Initiate a flight with a UAV.",
            "2. Issue the return to home command.",
            "3. Wait until the UAV is returned to its original launch location without any additional waypoints or routing commands being issued.",
            "4. Verify that the UAV has reached its original launch location.",
            "5. Ensure no additional waypoints or routing commands were sent.",
            "6. Confirm the original launch location is accurately recorded in the system's logs."
        ],
        "expectedResult": "The UAV is successfully returned to its original launch location without any additional waypoints or routing commands being issued, and the original launch location is accurately recorded in the system's logs.",
        "testCaseID": 72,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands."
        ]
    },
    {
        "Requirement": "When the GCS loses the connection to an UAV the GCS shall attempt to reconnect.",
        "testObjective": "Verify that when the GCS loses the connection to an UAV, the GCS attempts to reconnect.",
        "preconditions": [
            "The GCS is connected to an UAV initially",
            "The GCS loses connection to the UAV"
        ],
        "testSteps": [
            "1. Establish initial connection between GCS and UAV",
            "2. Simulate loss of connection between GCS and UAV",
            "3. Verify that GCS attempts to reconnect",
            "4. Ensure that GCS connection is restored"
        ],
        "expectedResult": "The GCS successfully attempts to reconnect after losing connection to the UAV.",
        "testCaseID": 73,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect"
        ]
    },
    {
        "Requirement": "The UAVActivationManager shall only activate UAVs that are registered.",
        "testObjective": "Verify that the UAVActivationManager activates only registered UAVs.",
        "preconditions": [
            "The application must be running.",
            "At least one registered UAV exists.",
            "A non-registered UAV is activated."
        ],
        "testSteps": [
            "1. Activate a non-registered UAV.",
            "2. Observe whether the activation is allowed or not.",
            "3. Verify that activation is denied if the UAV is not registered."
        ],
        "expectedResult": "The activation request is denied for non-registered UAVs.",
        "testCaseID": 74,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UAVActivationManager shall only activate UAVs that are registered."
        ]
    },
    {
        "Requirement": "When a GCS requests activation of a newly detected UAV, the GCSMiddleware shall forward the request to Dronology.",
        "testObjective": "Verify that when a GCS sends a request to activate a newly detected UAV, the GCSMiddleware forwards the request to Dronology.",
        "preconditions": [
            "The application must be running.",
            "A newly detected UAV is present and ready to be activated.",
            "The GCS has the authority to request activation of the UAV."
        ],
        "testSteps": [
            "1. Detect a new UAV.",
            "2. Initiate a request to activate the UAV from the GCS.",
            "3. Observe the GCSMiddleware forwarding the request to Dronology."
        ],
        "expectedResult": "The GCSMiddleware successfully forwards the activation request to Dronology, allowing the UAV to be activated.",
        "testCaseID": 75,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology."
        ]
    },
    {
        "Requirement": "When a UAV has an active onboard Obstacle Avoidance system, the ObstacleAvoidance system shall not issue directives.",
        "testObjective": "Verify that the ObstacleAvoidance system does not issue directives when it is active on a UAV.",
        "preconditions": [
            "The application must be running.",
            "A UAV must be in flight.",
            "An ObstacleAvoidance system is active on the UAV."
        ],
        "testSteps": [
            "1. Launch a UAV.",
            "2. Activate the ObstacleAvoidance system on the UAV.",
            "3. Issue a command that would require the ObstacleAvoidance system to issue a directive.",
            "4. Verify that the ObstacleAvoidance system does not issue any directives in response."
        ],
        "expectedResult": "The ObstacleAvoidance system does not issue any directives when it is active on the UAV.",
        "testCaseID": 76,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives"
        ]
    },
    {
        "Requirement": "The ObjectAvoidance system only issues commands within the capabilities of the UAV",
        "testObjective": "Verify that the ObjectAvoidance system only issues commands within the capabilities of the UAV",
        "preconditions": [
            "The application must be running.",
            "At least one UAV is active.",
            "ObjectAvoidance is enabled for the UAV."
        ],
        "testSteps": [
            "1. Create an active UAV with ObjectAvoidance enabled.",
            "2. Place an obstacle within the UAV's proximity.",
            "3. Issue a command that would exceed the UAV's capabilities.",
            "4. Observe that the ObjectAvoidance system does not issue the command."
        ],
        "expectedResult": "The ObjectAvoidance system does not issue the command when the command exceeds the UAV's capabilities.",
        "testCaseID": 77,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The ObjectAvoidance system only issues commands within the capabilities of the UAV"
        ]
    },
    {
        "Requirement": "If a UAV takes evasive actions the system will ensure that it will eventually reach its destination.",
        "testObjective": "Verify that when a UAV takes evasive actions, the system ensures it eventually reaches its destination.",
        "preconditions": [
            "The application must be running.",
            "A UAV is on the ground and begins taking evasive actions.",
            "An evasive action command is issued to the UAV to avoid an obstacle."
        ],
        "testSteps": [
            "1. Add a scenario where a UAV is taking evasive actions to avoid an obstacle.",
            "2. Send an evasive command to the UAV.",
            "3. Monitor the UAV's progress towards its destination.",
            "4. Assert that the UAV successfully reaches its destination without further evasive actions or with controlled evasive actions that do not prevent reaching the destination."
        ],
        "expectedResult": "The UAV successfully reaches its destination, either directly or after evading the obstacle(s) through controlled evasive maneuvers.",
        "testCaseID": 78,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination"
        ]
    },
    {
        "Requirement": "When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV.",
        "testObjective": "Verify that when a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system issues evasive directives.",
        "preconditions": [
            "The application must be running.",
            "There is a UAV in flight.",
            "A stationary or moving object is within the proximity of the UAV."
        ],
        "testSteps": [
            "1. Ensure that a UAV is in flight.",
            "2. Place a stationary or moving object within the proximity of the UAV.",
            "3. Observe if the ObjectAvoidance system issues evasive directives to the UAV.",
            "4. Verify that the evasion is effective in moving the UAV away from the object."
        ],
        "expectedResult": "The ObjectAvoidance system issues evasive directives, and the UAV successfully moves away from the object.",
        "testCaseID": 79,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV"
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall display the location of active UAVs as icons on the map.",
        "testObjective": "Verify that the RealTimeFlightUI accurately displays active UAVs with icons on the map.",
        "preconditions": [
            "The application must be running.",
            "There are one or more active UAVs in flight."
        ],
        "testSteps": [
            "1. Open the application.",
            "2. Add one or more active UAVs to the map.",
            "3. As a user views the RealTimeFlightUI.",
            "4. Observe the display of active UAVs as icons on the map."
        ],
        "expectedResult": "Active UAVs are displayed as icons on the RealTimeFlightUI map.",
        "testCaseID": 80,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall display the location of active UAVs as icons on the map."
        ]
    },
    {
        "Requirement": "When the RealTimeFlightUI is loaded, a map shall be displayed.",
        "testObjective": "Verify that the RealTimeFlightUI displays a map upon initialization.",
        "preconditions": [
            "The application must be running.",
            "The RealTimeFlightUI must be loaded."
        ],
        "testSteps": [
            "1. Ensure the RealTimeFlightUI is loaded.",
            "2. Initiate the application.",
            "3. Verify that the map displays correctly."
        ],
        "expectedResult": "The map is displayed in the RealTimeFlightUI.",
        "testCaseID": 81,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the RealTimeFlightUI is loaded  a map shall be displayed."
        ]
    },
    {
        "testCaseID": 82,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV."
        ]
    },
    {
        "Requirement": "The UIMiddleware shall only assign one control-client at a time for each UAV.",
        "testObjective": "Verify that the UIMiddleware assigns only one control-client per UAV at a time.",
        "preconditions": [
            "The application must be running.",
            "At least one UAV is connected to the GCS."
        ],
        "testSteps": [
            "1. Connect a first UAV to the GCS.",
            "2. Connect a second UAV to the GCS.",
            "3. Add a control-client to the first UAV.",
            "4. Attempt to add a control-client to the second UAV."
        ],
        "expectedResult": "Only one control-client is assigned to each UAV at all times.",
        "additionalNotes": "The UIMiddleware must ensure no two control-clients are assigned to the same UAV simultaneously.",
        "testCaseID": 83,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall only assign one control-client at a time for each UAV."
        ]
    },
    {
        "Requirement": "The UIMiddleware shall provide an interface for registering UI clients.",
        "testObjective": "Verify that the UIMiddleware provides an interface for registering UI clients.",
        "preconditions": [
            "The application must be running.",
            "One or more UI clients are registered."
        ],
        "testSteps": [
            "1. Add a UI client.",
            "2. Register the client with the UIMiddleware.",
            "3. Verify that the client is listed in the interface."
        ],
        "expectedResult": "UI client is registered with UIMiddleware and listed in the interface.",
        "testCaseID": 84,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall provide an interface for registering UI clients."
        ]
    },
    {
        "Requirement": "When a UAV's current flight is cancelled, the SingleUAVFlightPlanScheduler shall cancel all scheduled flight plans for that UAV.",
        "testObjective": "Verify that when a current flight is canceled, all associated flight plans are also canceled.",
        "preconditions": [
            "The application must be running with a UAV in flight.",
            "There are scheduled flight plans associated with the UAV's current flight."
        ],
        "testSteps": [
            "1. Add a flight plan for a UAV.",
            "2. Cancel the current flight plan for the UAV.",
            "3. Wait for all scheduled flight plans to be canceled."
        ],
        "expectedResult": "All scheduled flight plans for the canceled flight are successfully canceled from the SingleUAVFlightPlanScheduler.",
        "testCaseID": 85,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV."
        ]
    },
    {
        "Requirement": "When a UAV has pending flight plans and reaches the final waypoint of its current flight plan, the SingleUAVFlightPlanScheduler executes the next assigned flight plan.",
        "testObjective": "Verify that the SingleUAVFlightPlanScheduler correctly executes the next flight plan after reaching the final waypoint.",
        "preconditions": [
            "The application must be running.",
            "A UAV is active and has at least one pending flight plan.",
            "A waypoint is marked as final for the current flight plan of the UAV.",
            "The next flight plan is assigned to the UAV and is ready to be executed."
        ],
        "testSteps": [
            "1. Add a flight plan to a UAV with waypoints.",
            "2. Mark the final waypoint of the current flight plan.",
            "3. Add the next flight plan to the same UAV.",
            "4. Trigger the execution of the current flight plan to reach the final waypoint.",
            "5. Verify that the next flight plan starts executing after the final waypoint is reached."
        ],
        "expectedResult": "The SingleUAVFlightPlanScheduler successfully executes the next flight plan once the current flight plan's final waypoint is reached.",
        "testCaseID": 86,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan."
        ]
    },
    {
        "Requirement": "If requested, the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.",
        "testObjective": "Verify that when the SingleUAVFlightPlanScheduler is requested to unassign a flight plan, it correctly removes the assigned flight plan from the pending list of the UAV.",
        "preconditions": [
            "The application must be in a state where a flight plan is pending execution for a UAV.",
            "The SingleUAVFlightPlanScheduler is activated to perform the unassignment action.",
            "The flight plan is marked as pending and not yet executed.",
            "The SingleUAVFlightPlanScheduler has the authority to unassign the flight plan."
        ],
        "testSteps": [
            "1. Activate a pending flight plan for a UAV.",
            "2. Manually request the SingleUAVFlightPlanScheduler to unassign the flight plan.",
            "3. Verify that the flight plan is removed from the pending list of the UAV.",
            "4. Verify that the UAV is no longer waiting to execute the flight plan.",
            "5. Verify that the SingleUAVFlightPlanScheduler logs the unassignment action.",
            "6. Verify that the flight plan is now marked as completed or executed."
        ],
        "expectedResult": "The flight plan is successfully unassigned from the pending list of the UAV, and the execution process is updated accordingly.",
        "testCaseID": 87,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution."
        ]
    },
    {
        "Requirement": "The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.",
        "testObjective": "Verify that the SingleUAVFlightPlanScheduler maintains a managed list of pending flight plans for each UAV.",
        "preconditions": [
            "The application must be running.",
            "One or more pending flight plans for a UAV exist."
        ],
        "testSteps": [
            "1. Add a flight plan for a UAV.",
            "2. Modify or remove a flight plan for the same UAV.",
            "3. Verify that all pending flight plans for that UAV remain in the managed list."
        ],
        "expectedResult": "All pending flight plans for the UAV are correctly maintained in the list.",
        "testCaseID": 88,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV."
        ]
    },
    {
        "Requirement": "When a flight plan is executed, the VehicleCore shall send the next waypoint to the UAV.",
        "testObjective": "Verify that when a flight plan is executed, the VehicleCore sends the next waypoint to the UAV.",
        "preconditions": [
            "The application must be running.",
            "A flight plan is being executed."
        ],
        "testSteps": [
            "1. Add a flight plan.",
            "2. Initiate execution of the flight plan.",
            "3. Verify that the next waypoint is sent to the UAV by VehicleCore."
        ],
        "expectedResult": "The next waypoint is sent to the UAV by VehicleCore as part of executing the flight plan.",
        "testCaseID": 89,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV."
        ]
    },
    {
        "Requirement": "Each waypoint shall be specified using coordinates that include longitude, latitude, and altitude.",
        "testObjective": "Verify that waypoints are correctly specified with longitude, latitude, and altitude.",
        "preconditions": [
            "The application must be running.",
            "A waypoint is added to the flight route."
        ],
        "testSteps": [
            "1. Add a waypoint to the flight route.",
            "2. Enter longitude, latitude, and altitude values for the waypoint.",
            "3. Verify that the waypoint is displayed with correct coordinates and altitude on the map.",
            "4. Ensure that the waypoint is correctly registered in the flight route database."
        ],
        "expectedResult": "Waypoints are correctly specified with longitude, latitude, and altitude, and are displayed accurately on the map and recorded in the database.",
        "testCaseID": 90,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude."
        ]
    },
    {
        "testCaseID": 91,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes."
        ]
    },
    {
        "Requirement": "The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.",
        "testObjective": "Verify that the UAVActivationManager correctly activates and deactivates instances of drones, ensuring no duplicates are active simultaneously.",
        "preconditions": [
            "The application must have registered multiple drones.",
            "At least one drone is active initially.",
            "Drones have unique identifiers.",
            "Drones can be deactivated at any time."
        ],
        "testSteps": [
            "1. Register multiple drones with unique IDs.",
            "2. Activate one drone.",
            "3. Attempt to activate another drone.",
            "4. Verify that the second activation fails.",
            "5. Deactivate the first drone.",
            "6. Re-activate the first drone to confirm it's now active.",
            "7. Register another new drone with a unique ID.",
            "8. Activate the new drone to ensure it's recognized as unique and active."
        ],
        "expectedResult": "The system correctly manages activation, preventing duplicate active instances and allowing unique activation of each drone.",
        "testCaseID": 92,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time."
        ]
    },
    {
        "Requirement": "The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.",
        "testObjective": "Verify that the SingleUAVFlightPlanScheduler executes only one flight plan at a time for each UAV.",
        "preconditions": [
            "The application must be running.",
            "One or more flight plans are assigned to a UAV."
        ],
        "testSteps": [
            "1. Add multiple flight plans to a UAV.",
            "2. Trigger the execution of flight plans.",
            "3. Observe that only one flight plan is executed at a time."
        ],
        "expectedResult": "The SingleUAVFlightPlanScheduler correctly executes only one flight plan for the UAV at any given time.",
        "testCaseID": 93,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV."
        ]
    },
    {
        "Requirement": "The VehicleCore shall assign a unique ID to each activated UAV.",
        "testObjective": "Verify that the VehicleCore assigns a unique ID to each activated UAV.",
        "preconditions": [
            "The application must be running.",
            "At least two UAVs are activated.",
            "The application has a list of registered UAVs."
        ],
        "testSteps": [
            "1. Activate first UAV.",
            "2. Activate second UAV.",
            "3. Verify that each activated UAV has a unique ID."
        ],
        "expectedResult": "Each activated UAV has a unique ID assigned as per the VehicleCore's functionality.",
        "testCaseID": 94,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall assign a unique ID to each activated UAV."
        ]
    },
    {
        "Requirement": "If a client registers for notifications, the UIMiddleware shall send notifications for specific events.",
        "testObjective": "Verify that when a client registers for notifications, the UIMiddleware correctly sends notifications for specific events.",
        "preconditions": [
            "The application must be running.",
            "A client has registered for notifications."
        ],
        "testSteps": [
            "1. Register a client for notifications.",
            "2. Trigger a specific event that should generate a notification.",
            "3. Verify that the UIMiddleware sends the notification to the client as per the registered event type."
        ],
        "expectedResult": "The client receives the notification as specified for the registered event type.",
        "testCaseID": 95,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a client registers for notifications  the UIMiddleware shall send notifications for specific events"
        ]
    },
    {
        "Requirement": "When requested the VehicleCore shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram.",
        "testObjective": "Verify that when a requested state transition is made the VehicleCore correctly transitions the UAV to the new state as per the defined state transition diagram.",
        "preconditions": [
            "The application must be running.",
            "A valid state transition request is provided to VehicleCore.",
            "The current state of the UAV is known and valid."
        ],
        "testSteps": [
            "1. Add a valid state transition request to VehicleCore.",
            "2. Verify that the UAV's state is updated according to the state transition diagram.",
            "3. Confirm that the transition occurred without errors.",
            "4. Log any errors encountered during the transition and ensure they are resolved.",
            "5. Repeat the process to ensure consistency in state transitions."
        ],
        "expectedResult": "The UAV transitions correctly to the new state as per the state transition diagram without errors.",
        "additionalNotes": "Ensure that the state transition logic in VehicleCore correctly references the state transition diagram and handles all possible transitions.",
        "possibleFailures": [
            "Transition to an invalid state.",
            "Failing to update the UAV's state correctly.",
            "Transition not handled by the state transition diagram."
        ],
        "testCaseID": 96,
        "prompt": [
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram"
        ]
    }
]