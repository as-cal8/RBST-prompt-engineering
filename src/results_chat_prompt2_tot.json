[
    {
        "Requirement": "The MapComponent shall support different types of map layers (e.g. terrain satellite).",
        "testObjective": "Verify that the MapComponent supports different types of map layers such as terrain and satellite.",
        "preconditions": [
            "The application must be running.",
            "The MapComponent is configured to display map layers."
        ],
        "testSteps": [
            "1. Open the application.",
            "2. Navigate to the MapComponent settings.",
            "3. Select a map layer type (e.g. terrain, satellite).",
            "4. Verify that the selected map layer displays correctly.",
            "5. Repeat for other map layer types.",
            "6. Ensure that all selected map layers are supported.",
            "7. Verify that the application functions correctly with multiple map layers."
        ],
        "expectedResult": "The MapComponent supports various map layer types including terrain and satellite, and displays them correctly without issues.",
        "testCaseID": 0,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)"
        ]
    },
    {
        "Requirement": "The MissionPlanner shall execute flight plans for multiple UAVs concurrently.",
        "testObjective": "Verify that the MissionPlanner executes flight plans for multiple UAVs concurrently.",
        "preconditions": [
            "The application must be running.",
            "Multiple flight plans are available.",
            "At least two Unmanned Aerial Systems (UAS) are selected."
        ],
        "testSteps": [
            "1. Add multiple flight plans.",
            "2. Select at least two UAS.",
            "3. Execute flight plans concurrently.",
            "4. Observe that all selected UAS execute their respective flight plans simultaneously."
        ],
        "expectedResult": "Multiple UAS execute their flight plans concurrently without interference.",
        "testCaseID": 1,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The MissionPlanner shall execute flight plans for multiple UAVs concurrently."
        ]
    },
    {
        "Requirement": "The GCS shall transmit the UAV's properties to the GCSMiddleware.",
        "testObjective": "Verify that the GCS transmits the UAV's properties to the GCSMiddleware.",
        "preconditions": [
            "The application must be running.",
            "The GCS is operational and capable of transmitting data."
        ],
        "testSteps": [
            "1. Access the GCS interface.",
            "2. Identify the GCS's data transmission module.",
            "3. Trigger the transmission of UAV's properties.",
            "4. Wait for the transmission to complete.",
            "5. Verify that the GCSMiddleware received the data."
        ],
        "expectedResult": "The GCS successfully transmitted the UAV's properties to the GCSMiddleware.",
        "testCaseID": 2,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCS shall transmit the UAV's properties to the GCSMiddleware"
        ]
    },
    {
        "Requirement": "The GCS shall transmit the UAV's current location to the GCSMiddleware.",
        "testObjective": "Verify that the GCS transmits the UAV's current location to the GCSMiddleware.",
        "preconditions": [
            "The application must be running.",
            "The GCS is operational.",
            "The GCSMiddleware is operational."
        ],
        "testSteps": [
            "1. Add a UAV to the system.",
            "2. As a GCS operator, initiate a location transmission.",
            "3. Wait for the GCSMiddleware to receive and process the location data."
        ],
        "expectedResult": "The GCS successfully transmits the UAV's current location to the GCSMiddleware.",
        "testCaseID": 3,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCS shall transmit the UAV's current location to the GCSMiddleware"
        ]
    },
    {
        "Requirement": "The GCS shall report newly connected UAVs to the GCSMiddleware.",
        "testObjective": "Verify that the GCS reports newly connected UAVs to the GCSMiddleware.",
        "preconditions": [
            "The application must be running.",
            "One or more newly connected UAVs are present in the system."
        ],
        "testSteps": [
            "1. Start the application.",
            "2. Connect a new UAV.",
            "3. Verify that the GCS reports the newly connected UAV to the GCSMiddleware."
        ],
        "expectedResult": "The GCS has reported the newly connected UAV to the GCSMiddleware.",
        "testCaseID": 4,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCS shall report newly connected UAVs to the GCSMiddleware."
        ]
    },
    {
        "Requirement": "The GCS shall assign a message frequency for all UAVs.",
        "testObjective": "Verify that the GCS assigns a message frequency to all UAVs.",
        "preconditions": [
            "The application must be running.",
            "There are one or more UAVs in the system."
        ],
        "testSteps": [
            "1. Add one or more UAVs.",
            "2. Verify that the GCS assigns a message frequency to each UAV.",
            "3. Confirm that the message frequency is consistent across all UAVs."
        ],
        "expectedResult": "All UAVs are assigned a consistent message frequency by the GCS.",
        "testCaseID": 5,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCS shall assign a message frequency for all UAVs."
        ]
    },
    {
        "Requirement": "When the GCS receives a UAV command from the GCSMiddleware the GCS shall forward the command to the respective UAV.",
        "testObjective": "Verify that when the GCS receives a UAV command from the GCSMiddleware the GCS forwards the command to the respective UAV.",
        "preconditions": [
            "The GCS must be running.",
            "There is a GCSMiddleware in place to handle UAV commands."
        ],
        "testSteps": [
            "1. The GCS receives a UAV command from the GCSMiddleware.",
            "2. The GCS forwards the command to the respective UAV.",
            "3. Verify that the command was successfully forwarded to the respective UAV."
        ],
        "expectedResult": "The GCS forwards the UAV command to the respective UAV successfully.",
        "testCaseID": 6,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV."
        ]
    },
    {
        "Requirement": "When the connection to the GCS from the GCSMiddleware is lost, the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.",
        "testObjective": "Verify that when the connection to the GCS from the GCSMiddleware is lost, the GCSMiddleware notifies Dronology and deactivates all associated UAVs.",
        "preconditions": [
            "The application must be running.",
            "There is at least one GCS connected to the system."
        ],
        "testSteps": [
            "1. Establish a connection to the GCS from the GCSMiddleware.",
            "2. Simulate or cause a loss of connection to the GCS.",
            "3. Observe if GCSMiddleware notifies Dronology.",
            "4. Check if all associated UAVs are deactivated."
        ],
        "expectedResult": "The GCSMiddleware notifies Dronology and deactivates all associated UAVs upon loss of GCS connection.",
        "testCaseID": 7,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs."
        ]
    },
    {
        "Requirement": "The GCSMiddleware shall forward commands sent from Dronology to a GCS.",
        "testObjective": "Verify that the GCSMiddleware forwards commands sent from Dronology to a GCS.",
        "preconditions": [
            "The application must be running.",
            "Dronology has sent commands to the GCSMiddleware.",
            "A GCS is configured and ready to receive commands."
        ],
        "testSteps": [
            "1. Verify that Dronology has sent commands to the GCSMiddleware.",
            "2. As a tester, ensure that the GCS is configured and ready to receive commands.",
            "3. Observe whether the GCSMiddleware forwards commands from Dronology to the GCS.",
            "4. Check if the GCS receives the commands and executes them appropriately.",
            "5. Verify that the GCSMiddleware logs the command forwarding activity."
        ],
        "expectedResult": "The GCSMiddleware has successfully forwarded commands from Dronology to the GCS, ensuring the GCS receives and processes the commands as intended.",
        "testCaseID": 8,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware shall forward commands sent from Dronology to a GCS"
        ]
    },
    {
        "testCaseID": 9,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS."
        ]
    },
    {
        "testCaseID": 10,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology"
        ]
    },
    {
        "testCaseID": 11,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware shall handle multiple GCS"
        ]
    },
    {
        "Requirement": "The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component.",
        "testObjective": "Verify that the DronologyRuntimeMonitor can receive messages from any Dronology component.",
        "preconditions": [
            "The DronologyRuntimeMonitor is operational.",
            "There exists at least one Dronology component that can send messages."
        ],
        "testSteps": [
            "1. Identify a Dronology component that can send messages.",
            "2. Configure the DronologyRuntimeMonitor to listen for messages from that component.",
            "3. Send a message from the identified component.",
            "4. Verify that the message is received by the DronologyRuntimeMonitor.",
            "5. Repeat steps 1-4 with additional components as needed.",
            "6. Ensure that the DronologyRuntimeMonitor can handle multiple simultaneous message sources."
        ],
        "expectedResult": "The DronologyRuntimeMonitor successfully receives messages from all tested Dronology components without failure.",
        "testCaseID": 12,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component"
        ]
    },
    {
        "Requirement": "When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients.",
        "testObjective": "Verify that when a new monitoring message is received, the DronologyRuntimeMonitor forwards the message to all subscribed clients.",
        "preconditions": [
            "The DronologyRuntimeMonitor is running.",
            "There are one or more subscribed clients."
        ],
        "testSteps": [
            "1. Add one or more subscribed clients.",
            "2. A new monitoring message is received.",
            "3. Wait until DronologyRuntimeMonitor forwards the message to all clients."
        ],
        "expectedResult": "The monitoring message is received by all subscribed clients.",
        "testCaseID": 13,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients"
        ]
    },
    {
        "Requirement": "The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients.",
        "testObjective": "Verify that the DronologyRuntimeMonitor retrieves and distributes monitoring messages to clients.",
        "preconditions": [
            "The application must be running.",
            "DronologyRuntimeMonitor is operational and configured.",
            "Clients are connected and ready to receive messages."
        ],
        "testSteps": [
            "1. Start the application.",
            "2. Configure DronologyRuntimeMonitor to be operational and configured.",
            "3. Connect clients to the application.",
            "4. Generate a monitoring message.",
            "5. Verify that the message is retrieved and distributed to clients."
        ],
        "expectedResult": "DronologyRuntimeMonitor successfully retrieves and distributes monitoring messages to clients.",
        "testCaseID": 14,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients"
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall notify users when an emergency occurs.",
        "testObjective": "Verify that the RealTimeFlightUI notifies users when an emergency occurs.",
        "preconditions": [
            "The application must be in emergency mode.",
            "There is a user logged in."
        ],
        "testSteps": [
            "1. Initiate emergency mode.",
            "2. As a user, check for notifications.",
            "3. Verify that the RealTimeFlightUI sent a notification to the user."
        ],
        "expectedResult": "Emergency notification is sent to the user by the RealTimeFlightUI.",
        "testCaseID": 15,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall notify users when an emergency occurs."
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.",
        "testObjective": "Verify that the RealTimeFlightUI allows users to follow one or multiple UAVs on the map.",
        "preconditions": [
            "The application must be running.",
            "A real-time flight data feed is available."
        ],
        "testSteps": [
            "1. Log in as a user.",
            "2. Access the RealTimeFlightUI.",
            "3. Add one or more UAVs to the map.",
            "4. Verify that the UI displays the UAVs.",
            "5. Try following multiple UAVs simultaneously.",
            "6. Ensure the UI provides real-time updates as the UAVs move."
        ],
        "expectedResult": "Users can successfully follow one or more UAVs on the map with real-time updates.",
        "testCaseID": 16,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map."
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs, sending multiple UAVs to home) to a group of UAVs.",
        "testObjective": "Verify that users can perform emergency operations (e.g. hovering multiple UAVs, sending multiple UAVs to home) to a group of UAVs in the RealTimeFlightUI.",
        "preconditions": [
            "The application must be running.",
            "There are multiple UAVs in the system."
        ],
        "testSteps": [
            "1. Add one or more UAVs to the system.",
            "2. As a user performs an emergency operation (e.g. hover multiple UAVs, send multiple UAVs to home).",
            "3. Observe if the emergency operation is properly executed on all selected UAVs."
        ],
        "expectedResult": "Emergency operations are correctly performed on the selected group of UAVs.",
        "testCaseID": 17,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs"
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.",
        "testObjective": "Verify that the RealTimeFlightUI allows users to apply flight operations to one or more selected UAVs.",
        "preconditions": [
            "The application must be running.",
            "One or more users are logged in.",
            "One or more UAVs are selected."
        ],
        "testSteps": [
            "1. Open the RealTimeFlightUI.",
            "2. Select one or more UAVs.",
            "3. As a user applies a flight operation.",
            "4. Verify that the flight operation is applied to the selected UAVs."
        ],
        "expectedResult": "Flight operations are successfully applied to the selected UAVs.",
        "testCaseID": 18,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs."
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall display all currently active flight plans on the map.",
        "testObjective": "Verify that the RealTimeFlightUI displays all currently active flight plans on the map.",
        "preconditions": [
            "The application must be running.",
            "There are one or more flight plans active."
        ],
        "testSteps": [
            "1. Ensure the application is running.",
            "2. Verify that there are one or more active flight plans.",
            "3. Click on the RealTimeFlightUI element.",
            "4. Check that all currently active flight plans are displayed on the map."
        ],
        "expectedResult": "All currently active flight plans are displayed on the RealTimeFlightUI.",
        "testCaseID": 19,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall display all currently active flight plans on the map."
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall display the name and status of all currently activated UAVs.",
        "testObjective": "Verify that the RealTimeFlightUI displays the name and status of all currently activated UAVs.",
        "preconditions": [
            "The application must be running.",
            "There are one or more activated UAVs."
        ],
        "testSteps": [
            "1. Open the application.",
            "2. Ensure that at least one UAV is activated.",
            "3. Click on the RealTimeFlightUI to display the UAV details.",
            "4. Verify that the name and status of all currently activated UAVs are displayed."
        ],
        "expectedResult": "The RealTimeFlightUI displays the name and status of all currently activated UAVs.",
        "testCaseID": 20,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall display the name and status of all currently activated UAVs"
        ]
    },
    {
        "Requirement": "When the RouteCreationUI is loaded a list of all existing routes shall be displayed.",
        "testObjective": "Verify that when the RouteCreationUI is loaded a list of all existing routes is displayed.",
        "preconditions": [
            "The application must be in a state where all routes are loaded."
        ],
        "testSteps": [
            "1. Open the RouteCreationUI.",
            "2. Wait until all routes are displayed."
        ],
        "expectedResult": "All routes are displayed in the RouteCreationUI.",
        "testCaseID": 21,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the RouteCreationUI is loaded a list of all existing routes shall be displayed."
        ]
    },
    {
        "Requirement": "The RouteCreationUI shall allow a user to delete a route.",
        "testObjective": "Verify that the RouteCreationUI allows a user to delete a route.",
        "preconditions": [
            "The application must be running.",
            "A route has been created."
        ],
        "testSteps": [
            "1. Open the RouteCreationUI.",
            "2. Create a route.",
            "3. As a user, navigate to the delete option.",
            "4. Select the route to delete.",
            "5. Click delete button.",
            "6. Verify that the route is deleted from the RouteCreationUI."
        ],
        "expectedResult": "The route is successfully deleted from the RouteCreationUI.",
        "testCaseID": 22,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall allow a user to delete a route."
        ]
    },
    {
        "Requirement": "The RouteCreationUI shall allow the user to create and modify a route.",
        "testObjective": "Verify that the RouteCreationUI allows users to create and modify routes.",
        "preconditions": [
            "The application must be running.",
            "The user has the necessary permissions to create routes."
        ],
        "testSteps": [
            "1. Add a new route.",
            "2. Modify an existing route.",
            "3. Ensure the UI provides feedback on the creation/modification attempt."
        ],
        "expectedResult": "Users can successfully create and modify routes through the RouteCreationUI with appropriate feedback.",
        "testCaseID": 23,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall allow the user to create and modify a route."
        ]
    },
    {
        "Requirement": "When requested the RouteCreationUI shall send a newly created or modified route to dronology.",
        "testObjective": "Verify that when the RouteCreationUI is requested to send a newly created or modified route, it successfully sends the route to Dronology.",
        "preconditions": [
            "The application must be running.",
            "A route must be created or modified."
        ],
        "testSteps": [
            "1. Create or modify a route in the RouteCreationUI.",
            "2. As a user requests to send the route to Dronology.",
            "3. Wait until Dronology receives the route.",
            "4. Verify that Dronology has received the route.",
            "5. Verify that the route is present in Dronology's database.",
            "6. Verify that the route is operational in Dronology's system."
        ],
        "expectedResult": "A newly created or modified route is successfully sent and stored in Dronology's database and operational.",
        "testCaseID": 24,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested  the RouteCreationUI shall send a newly created or modified route to dronology."
        ]
    },
    {
        "Requirement": "Each route shall include a unique ID, a textual description, and a set of waypoints, all of which are editable in the UI.",
        "testObjective": "Verify that each route includes a unique ID, a textual description, and a set of waypoints, all of which are editable in the UI.",
        "preconditions": [
            "The application must be running.",
            "At least one route is present in the application."
        ],
        "testSteps": [
            "1. Add a new route.",
            "2. Verify the route has a unique ID.",
            "3. Verify the route has a textual description.",
            "4. Verify the route has a set of waypoints.",
            "5. Edit the route to change its ID.",
            "6. Edit the route to change its textual description.",
            "7. Edit the route to add waypoints.",
            "8. Verify that the waypoints are editable in the UI."
        ],
        "expectedResult": "All routes have a unique ID, textual description, and waypoints that can be edited in the UI.",
        "testCaseID": 25,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI."
        ]
    },
    {
        "Requirement": "The RouteCreationUI shall only accept valid altitude and speed values for waypoint.",
        "testObjective": "Verify that the RouteCreationUI rejects invalid altitude or speed values for waypoints.",
        "preconditions": [
            "The application must be running.",
            "A waypoint is selected.",
            "The user enters either invalid altitude or speed for a waypoint."
        ],
        "testSteps": [
            "1. Add a waypoint.",
            "2. Enter an invalid altitude for the waypoint.",
            "3. Enter an invalid speed for the waypoint.",
            "4. Verify that the RouteCreationUI does not accept the invalid altitude or speed.",
            "5. Verify that the RouteCreationUI rejects the waypoint with invalid altitude or speed."
        ],
        "expectedResult": "Invalid altitude or speed values for waypoints are rejected by the RouteCreationUI.",
        "testCaseID": 26,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall only accept valid altitude and speed values for waypoint."
        ]
    },
    {
        "Requirement": "The RouteCreationUI shall distinguish between starting/ending and intermediate waypoint markers.",
        "testObjective": "Verify that the RouteCreationUI correctly distinguishes between starting/ending and intermediate waypoint markers.",
        "preconditions": [
            "The application must be in the RouteCreation mode.",
            "There are waypoints available in the route."
        ],
        "testSteps": [
            "1. Add at least two waypoints to the route.",
            "2. As a user selects the first waypoint as the starting marker.",
            "3. As a user selects the last waypoint as the ending marker.",
            "4. As a user selects an intermediate waypoint as the marker.",
            "5. Observe the visual distinction between the selected markers."
        ],
        "expectedResult": "The starting and ending waypoints are visually distinct from the intermediate waypoints.",
        "testCaseID": 27,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers."
        ]
    },
    {
        "Requirement": "When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.",
        "testObjective": "Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.",
        "preconditions": [
            "The application must be running.",
            "One or more flight plans are pending."
        ],
        "testSteps": [
            "1. Add one or more flight plans.",
            "2. As a user cancels a flight plan.",
            "3. Wait until RouteAssignmentUI notifies Dronology."
        ],
        "expectedResult": "Flight plan is canceled and Dronology received notification from RouteAssignmentUI.",
        "testCaseID": 28,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology."
        ]
    },
    {
        "testCaseID": 29,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution."
        ]
    },
    {
        "Requirement": "When a UAV is selected the RouteAssignmentUI shall display its active flight plans.",
        "testObjective": "Verify that when a UAV is selected the RouteAssignmentUI displays its active flight plans.",
        "preconditions": [
            "The application must be running.",
            "A UAV must be selected."
        ],
        "testSteps": [
            "1. Select a UAV.",
            "2. Observe that RouteAssignmentUI displays its active flight plans."
        ],
        "expectedResult": "The RouteAssignmentUI displays the active flight plans of the selected UAV.",
        "testCaseID": 30,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans."
        ]
    },
    {
        "Requirement": "When requested by the user the RouteAssignmentUI shall display details about the selected UAV and its flight plans.",
        "testObjective": "Verify that when a user selects a UAV the RouteAssignmentUI displays its details and flight plans.",
        "preconditions": [
            "The application must be running.",
            "A user selects a UAV from the list."
        ],
        "testSteps": [
            "1. Select a UAV from the list.",
            "2. As a user verify that the RouteAssignmentUI displays the UAV's details and flight plans."
        ],
        "expectedResult": "The UAV's details and flight plans are displayed in the RouteAssignmentUI.",
        "testCaseID": 31,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans."
        ]
    },
    {
        "Requirement": "When a route is assigned or removed from a UAV the RouteAssignmentUI shall notify Dronology.",
        "testObjective": "Verify that when a route is assigned or removed from a UAV the RouteAssignmentUI notifies Dronology.",
        "preconditions": [
            "The application must be running.",
            "One or more routes are assigned to a UAV."
        ],
        "testSteps": [
            "1. Add a route to a UAV.",
            "2. Remove a route from a UAV.",
            "3. Wait until RouteAssignmentUI notifies Dronology."
        ],
        "expectedResult": "When a route is assigned or removed from a UAV, the RouteAssignmentUI notifies Dronology.",
        "testCaseID": 32,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology."
        ]
    },
    {
        "Requirement": "The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.",
        "testObjective": "Verify that the RouteAssignmentUI provides means to select an existing routes and assign them to a UAV.",
        "preconditions": [
            "The application must be running.",
            "At least one existing route is present.",
            "A UAV is selected to assign a route."
        ],
        "testSteps": [
            "1. Open RouteAssignmentUI.",
            "2. Select an existing route.",
            "3. Assign the selected route to the currently selected UAV.",
            "4. Verify that the route is assigned to the UAV.",
            "5. Log out and log back in to ensure the assignment is preserved."
        ],
        "expectedResult": "The selected route is successfully assigned to the specified UAV and the assignment is preserved after login.",
        "testCaseID": 33,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV."
        ]
    },
    {
        "Requirement": "When loading the map view it shall be positioned at the pre-defined location.",
        "testObjective": "Verify that when the map view is loaded the RouteAssignmentUI is positioned at the pre-defined location.",
        "preconditions": [
            "The application must be running.",
            "A pre-defined location exists.",
            "The map view functionality has been implemented."
        ],
        "testSteps": [
            "1. Log in as a user.",
            "2. Load the map view.",
            "3. Verify that the RouteAssignmentUI is positioned at the pre-defined location."
        ],
        "expectedResult": "The RouteAssignmentUI is positioned at the pre-defined location upon loading of the map view.",
        "testCaseID": 34,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When loading the map view it shall be positioned at the pre-defined location"
        ]
    },
    {
        "Requirement": "When the VaadinUI is activated the VaadinUI shall be configured according to stored configuration parameters.",
        "testObjective": "Verify that when the VaadinUI is activated the VaadinUI is configured according to stored configuration parameters.",
        "preconditions": [
            "The application must be running.",
            "The VaadinUI is activated."
        ],
        "testSteps": [
            "1. Activate the VaadinUI.",
            "2. Wait until the VaadinUI is configured according to stored configuration parameters."
        ],
        "expectedResult": "VaadinUI is configured according to stored configuration parameters.",
        "testCaseID": 35,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters."
        ]
    },
    {
        "Requirement": "The UIMiddleware shall accept and activate a mission plan upon request.",
        "testObjective": "Verify that the UIMiddleware accepts and activates a mission plan upon request.",
        "preconditions": [
            "The application must be running.",
            "A mission plan is available in the mission list."
        ],
        "testSteps": [
            "1. Open the UIMiddleware.",
            "2. Request a mission plan.",
            "3. Wait until the UIMiddleware activates the mission plan."
        ],
        "expectedResult": "Mission plan is accepted and activated by UIMiddleware.",
        "testCaseID": 36,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall accept and activate a mission plan upon request."
        ]
    },
    {
        "Requirement": "The UIMiddleware shall enable an existing route to be assigned to an active UAV.",
        "testObjective": "Verify that the UIMiddleware enables an existing route to be assigned to an active UAV.",
        "preconditions": [
            "The UIMiddleware must be configured correctly.",
            "There is an existing route available in the route database.",
            "An active UAV is available for assignment."
        ],
        "testSteps": [
            "1. Configure the UIMiddleware correctly.",
            "2. Select an existing route from the route database.",
            "3. Select an active UAV.",
            "4. Enable the assignment of the selected route to the selected UAV.",
            "5. Verify that the UIMiddleware has successfully assigned the route to the UAV."
        ],
        "expectedResult": "The selected route is successfully assigned to the selected active UAV by the UIMiddleware.",
        "testCaseID": 37,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall enable an existing route to be assigned to an active UAV."
        ]
    },
    {
        "Requirement": "The UIMiddleware shall enable the creation and modification of flight routes.",
        "testObjective": "Verify that the UIMiddleware enables the creation and modification of flight routes.",
        "preconditions": [
            "The application must be running.",
            "Flight routes must be configured."
        ],
        "testSteps": [
            "1. As an admin, log into the application.",
            "2. Create a new flight route.",
            "3. Modify an existing flight route.",
            "4. Verify that the flight routes are enabled in the UIMiddleware."
        ],
        "expectedResult": "Flight routes are created, modified, and enabled in the UIMiddleware.",
        "testCaseID": 38,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall enable the creation and modification of flight routes"
        ]
    },
    {
        "Requirement": "The UIMiddleware accepts commands from UIs and forwards to Dronology.",
        "testObjective": "Verify that the UIMiddleware accepts commands from UIs and forwards them to Dronology.",
        "preconditions": [
            "The UIMiddleware must be running.",
            "A command from a UI is generated.",
            "Dronology is available to receive commands."
        ],
        "testSteps": [
            "1. Generate a command from a UI.",
            "2. As an operator, the UIMiddleware must accept the command.",
            "3. As an operator, the UIMiddleware must forward the command to Dronology."
        ],
        "expectedResult": "The UIMiddleware accepts the command and forwards it to Dronology without any errors.",
        "testCaseID": 39,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware accepts commands from UIs and forwards to Dronology"
        ]
    },
    {
        "Requirement": "The UIMiddleware shall provide a list of all existing routes.",
        "testObjective": "Verify that the UIMiddleware provides a list of all existing routes.",
        "preconditions": [
            "The application must be running.",
            "There are routes available to be listed."
        ],
        "testSteps": [
            "1. Access the UIMiddleware interface.",
            "2. Look for the list of routes.",
            "3. Verify the list contains all existing routes."
        ],
        "expectedResult": "The UIMiddleware displays a list of all existing routes.",
        "testCaseID": 40,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall provide a list of all existing routes"
        ]
    },
    {
        "Requirement": "The UIMiddleware shall provide a list of all active UAVs.",
        "testObjective": "Verify that the UIMiddleware provides a list of all active UAVs.",
        "preconditions": [
            "The application must be running.",
            "There are one or more active UAVs."
        ],
        "testSteps": [
            "1. Open the application.",
            "2. Access the UIMiddleware interface.",
            "3. Click the 'List UAVs' button.",
            "4. Verify that the list displays all active UAVs."
        ],
        "expectedResult": "The UIMiddleware correctly lists all active UAVs.",
        "testCaseID": 41,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall provide a list of all active UAVs"
        ]
    },
    {
        "testCaseID": 42,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The ActivityLogger shall log all commands sent to and messages received from a CGS."
        ]
    },
    {
        "Requirement": "The ActivityLogger shall log all flight plan related events.",
        "testObjective": "Verify that the ActivityLogger logs all flight plan related events.",
        "preconditions": [
            "The application must be running.",
            "Flight plan related events must be logged by the ActivityLogger."
        ],
        "testSteps": [
            "1. Start the application.",
            "2. Initiate a flight plan event.",
            "3. Verify that the ActivityLogger logs the event."
        ],
        "expectedResult": "All flight plan related events are logged by the ActivityLogger.",
        "testCaseID": 43,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The ActivityLogger shall log all flight plan related events."
        ]
    },
    {
        "testCaseID": 44,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The InternalSimulator shall approximate the state of the battery"
        ]
    },
    {
        "Requirement": "When given a landing command the InternalSimulator shall move the UAV from its current ground altitude corresponding to its current longitude and latitude.",
        "testObjective": "Verify that when a landing command is given the InternalSimulator moves the UAV to the correct ground altitude based on its current location.",
        "preconditions": [
            "The application must be running.",
            "There is a current location with longitude and latitude.",
            "A landing command has been issued."
        ],
        "testSteps": [
            "1. Verify that the application is running.",
            "2. Capture the current longitude and latitude.",
            "3. Issue a landing command.",
            "4. Wait until the InternalSimulator moves the UAV to the ground altitude corresponding to its current location."
        ],
        "expectedResult": "The UAV is successfully moved to the ground altitude corresponding to its current longitude and latitude.",
        "testCaseID": 45,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude."
        ]
    },
    {
        "testCaseID": 46,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached."
        ]
    },
    {
        "Requirement": "When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.",
        "testObjective": "Verify that when given a takeoff command the InternalSimulator moves the UAV to the takeoff altitude corresponding to its current longitude and latitude.",
        "preconditions": [
            "The application must be running.",
            "The current longitude and latitude of the UAV are known.",
            "The takeoff command is given.",
            "The InternalSimulator has the capability to calculate the takeoff altitude based on the current longitude and latitude."
        ],
        "testSteps": [
            "1. Ensure the application is running.",
            "2. Record the current longitude and latitude of the UAV.",
            "3. Issue a takeoff command.",
            "4. Wait for the InternalSimulator to calculate and move the UAV to the takeoff altitude corresponding to its current longitude and latitude."
        ],
        "expectedResult": "The UAV is at the takeoff altitude calculated from its current position.",
        "testCaseID": 47,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude."
        ]
    },
    {
        "Requirement": "The InternalSimulator shall approximate the behavior of a UAV.",
        "testObjective": "Verify that the InternalSimulator approximates the behavior of a UAV.",
        "preconditions": [
            "The application must be running."
        ],
        "testSteps": [
            "1. Start the InternalSimulator.",
            "2. Observe the behavior of the simulated UAV.",
            "3. Compare the simulated behavior with the actual UAV behavior."
        ],
        "expectedResult": "The InternalSimulator's behavior closely matches the actual UAV behavior.",
        "testCaseID": 48,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The InternalSimulator shall approximate the behavior of a UAV."
        ]
    },
    {
        "Requirement": "The UAVRegistrationManager shall store UAV meta-data information such as the UAV's technical characteristics.",
        "testObjective": "Verify that the UAVRegistrationManager stores UAV meta-data information such as the UAV's technical characteristics.",
        "preconditions": [
            "The application must be running.",
            "A UAV registration form has been submitted."
        ],
        "testSteps": [
            "1. Submit a UAV registration form with meta-data information.",
            "2. As an admin, verify that the meta-data is stored in the UAVRegistrationManager.",
            "3. Review the test results to ensure the meta-data was successfully stored."
        ],
        "expectedResult": "The UAV meta-data information is successfully stored in the UAVRegistrationManager.",
        "testCaseID": 49,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics"
        ]
    },
    {
        "Requirement": "When the maximum numbers of allowed activated UAVs has been reached the UAVActivationManager shall reject any further activation requests.",
        "testObjective": "Verify that when the maximum numbers of allowed activated UAVs has been reached the UAVActivationManager rejects any further activation requests.",
        "preconditions": [
            "The application must be running.",
            "The maximum number of allowed activated UAVs has been reached."
        ],
        "testSteps": [
            "1. Ensure that the maximum number of allowed activated UAVs has been reached.",
            "2. Initiate an activation request for a UAV.",
            "3. Wait until the UAVActivationManager rejects the activation request."
        ],
        "expectedResult": "When the maximum number of allowed activated UAVs has been reached, the UAVActivationManager rejects any further activation requests.",
        "testCaseID": 50,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests."
        ]
    },
    {
        "Requirement": "When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans.",
        "testObjective": "Verify that when a UAV is deactivated the UAVActivationManager cancels all current and scheduled flight plans.",
        "preconditions": [
            "The application must be running.",
            "A UAV is deactivated.",
            "There are current and scheduled flight plans in the system."
        ],
        "testSteps": [
            "1. Deactivate the UAV.",
            "2. Wait until all current and scheduled flight plans are canceled.",
            "3. Verify that the UAVActivationManager has successfully canceled all flight plans."
        ],
        "expectedResult": "All current and scheduled flight plans are canceled and the UAVActivationManager has successfully canceled them.",
        "testCaseID": 51,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans"
        ]
    },
    {
        "Requirement": "The VehicleCore shall support virtual UAVs.",
        "testObjective": "Verify that the VehicleCore supports virtual UAVs.",
        "preconditions": [
            "The application must be running.",
            "Virtual UAVs are defined as per the system's virtualization capabilities."
        ],
        "testSteps": [
            "1. Define a virtual UAV according to system's virtualization capabilities.",
            "2. Launch the virtual UAV within VehicleCore.",
            "3. Verify that the virtual UAV is operational within VehicleCore.",
            "4. As a system administrator, confirm that virtual UAV functionality is supported."
        ],
        "expectedResult": "The virtual UAV is successfully launched and operational within VehicleCore.",
        "testCaseID": 52,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall support virtual UAVs"
        ]
    },
    {
        "Requirement": "The VehicleCore shall support UAVs connected via the GCS.",
        "testObjective": "Verify that the VehicleCore supports UAVs connected via the GCS.",
        "preconditions": [
            "The application must be running.",
            "UAVs are connected to the GCS."
        ],
        "testSteps": [
            "1. Connect an UAV to the GCS.",
            "2. As a system administrator, verify that the UAV is supported by VehicleCore.",
            "3. As a system administrator, verify that the connection between the UAV and GCS is established."
        ],
        "expectedResult": "The VehicleCore supports the connection of the UAV via the GCS.",
        "testCaseID": 53,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall support UAVs connected via the GCS"
        ]
    },
    {
        "Requirement": "When a group of UAVs are assigned flight patterns as part of a mission the system shall provide a warning if any paths overlap.",
        "testObjective": "Verify that when a group of UAVs are assigned flight patterns as part of a mission the system provides a warning if any paths overlap.",
        "preconditions": [
            "The application must be running.",
            "A mission has been initiated.",
            "At least two flight patterns have been assigned to the group of UAVs."
        ],
        "testSteps": [
            "1. Initiate a mission.",
            "2. Assign two or more flight patterns to a group of UAVs.",
            "3. Observe if the system provides a warning when flight patterns overlap."
        ],
        "expectedResult": "The system provides a warning when any two flight patterns overlap.",
        "testCaseID": 54,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap."
        ]
    },
    {
        "Requirement": "If requested the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV.",
        "testObjective": "Verify that when the SingleUAVFlightPlanScheduler is requested to abort a flight plan, it aborts the currently executing flight plan of an UAV.",
        "preconditions": [
            "The application is running.",
            "There is a currently executing flight plan of an UAV."
        ],
        "testSteps": [
            "1. Add a flight plan for an UAV.",
            "2. Request the SingleUAVFlightPlanScheduler to abort the flight plan.",
            "3. Wait until the flight plan is aborted and verify that it has been aborted."
        ],
        "expectedResult": "The currently executing flight plan of an UAV has been aborted.",
        "testCaseID": 55,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV"
        ]
    },
    {
        "Requirement": "If a UAV does not have any pending flight plans then when it reaches the final waypoint of its current flight plan the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.",
        "testCaseID": 56,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place."
        ]
    },
    {
        "Requirement": "If a scheduled flight is not manually assigned to a UAV the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV.",
        "testObjective": "Verify that when a scheduled flight is not manually assigned to a UAV, the SingleUAVFlightPlanScheduler automatically assigns the route to an UAV.",
        "preconditions": [
            "The application must be running.",
            "A scheduled flight exists.",
            "The flight is not manually assigned to a UAV."
        ],
        "testSteps": [
            "1. As a developer adds a new flight.",
            "2. The flight is not manually assigned to a UAV.",
            "3. The flight is not manually assigned to a UAV.",
            "4. The SingleUAVFlightPlanScheduler assigns the route automatically to an UAV."
        ],
        "expectedResult": "The flight is assigned automatically to an UAV by the SingleUAVFlightPlanScheduler.",
        "testCaseID": 57,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV"
        ]
    },
    {
        "testCaseID": 58,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV."
        ]
    },
    {
        "Requirement": "When requested the SingleUAVFlightPlanScheduler shall schedule a route for execution.",
        "testObjective": "Verify that when the SingleUAVFlightPlanScheduler is requested to schedule a route for execution, the route is scheduled successfully.",
        "preconditions": [
            "The application must be in the scheduler mode.",
            "A flight plan is available to be scheduled."
        ],
        "testSteps": [
            "1. Add a flight plan.",
            "2. Request the SingleUAVFlightPlanScheduler to schedule a route for execution.",
            "3. Verify that the route is scheduled successfully."
        ],
        "expectedResult": "The route is scheduled successfully by the SingleUAVFlightPlanScheduler.",
        "testCaseID": 59,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution."
        ]
    },
    {
        "Requirement": "When requested if a mission is currently active the MissionPlanner shall cancel the active mission.",
        "testObjective": "Verify that when a mission is requested to be canceled the MissionPlanner cancels the active mission.",
        "preconditions": [
            "The application must be running.",
            "There is an active mission present."
        ],
        "testSteps": [
            "1. Verify that a mission is active.",
            "2. As a tester request the cancellation of the active mission.",
            "3. Wait until the MissionPlanner cancels the active mission."
        ],
        "expectedResult": "The active mission is canceled by the MissionPlanner.",
        "testCaseID": 60,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission."
        ]
    },
    {
        "testCaseID": 61,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The MissionPlanner shall manage predefined FlightPatterns"
        ]
    },
    {
        "Requirement": "When a flight plan is activated for a UAV currently on the ground the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.",
        "testObjective": "Verify that when a flight plan is activated for a UAV currently on the ground the FlightSchedulingandExecution notifies the UAV to takeoff vertically until it reaches the prescribed altitude.",
        "preconditions": [
            "The application must be running.",
            "A UAV is on the ground.",
            "A flight plan is selected/activated."
        ],
        "testSteps": [
            "1. Add a flight plan.",
            "2. Activate a UAV on the ground.",
            "3. As an admin, activate the flight plan for the UAV.",
            "4. Wait until the FlightSchedulingandExecution notifies the UAV to takeoff vertically until it reaches the prescribed altitude."
        ],
        "expectedResult": "The FlightSchedulingandExecution correctly notifies the UAV to takeoff vertically until it reaches the prescribed altitude.",
        "testCaseID": 62,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude."
        ]
    },
    {
        "Requirement": "If a flight plan is active and the hover in place command is rescinded the FlightManager shall notify the UAV to continue to the originally designated waypoint.",
        "testObjective": "Verify that when a hover in place command is rescinded the FlightManager notifies the UAV to continue to the originally designated waypoint.",
        "preconditions": [
            "The application must be running.",
            "There is an active flight plan with waypoints defined.",
            "A hover in place command is being rescinded."
        ],
        "testSteps": [
            "1. Add a flight plan with waypoints.",
            "2. Issue a hover in place command.",
            "3. As an expert, rescind the hover in place command.",
            "4. Wait until the FlightManager notifies the UAV to continue to the originally designated waypoint."
        ],
        "expectedResult": "After rescinding the hover in place command, the FlightManager sends a notification to the UAV to continue to the originally designated waypoint.",
        "testCaseID": 63,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint."
        ]
    },
    {
        "Requirement": "If a flight route is assigned to a UAV which is currently hovering in place the FlightManager shall assign the route and maintain the hover in place mode.",
        "testObjective": "Verify that when a flight route is assigned to a hovering UAV the FlightManager assigns the route and maintains hover.",
        "preconditions": [
            "The application must be running.",
            "A flight route is assigned to a UAV.",
            "A flight route is assigned to a UAV which is currently hovering in place."
        ],
        "testSteps": [
            "1. Add a flight route.",
            "2. Assign it to a hovering UAV.",
            "3. Verify that the FlightManager assigns the route and maintains the hover in place mode."
        ],
        "expectedResult": "Flight assignment and hover maintenance successful.",
        "testCaseID": 64,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode."
        ]
    },
    {
        "Requirement": "When the hover in place command is issued the FlightManager shall halt the UAV in place and maintain its current position.",
        "testObjective": "Verify that when the hover in place command is issued the FlightManager halts the UAV in place and maintains its current position.",
        "preconditions": [
            "The application must be in a hover mode.",
            "The FlightManager is operational."
        ],
        "testSteps": [
            "1. Hover the UAV in place.",
            "2. Issue the hover in place command.",
            "3. Wait for the FlightManager to halt the UAV in place and maintain its current position."
        ],
        "expectedResult": "The UAV is halted in place and maintains its current position.",
        "testCaseID": 65,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position."
        ]
    },
    {
        "Requirement": "When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.",
        "testObjective": "Verify that when given two coordinates the CoordinateSystem computes the direction from the first coordinate to the second coordinate.",
        "preconditions": [
            "The application must be running.",
            "Two distinct coordinates must be provided."
        ],
        "testSteps": [
            "1. Enter first coordinate.",
            "2. Enter second coordinate.",
            "3. Compute direction from first to second coordinate.",
            "4. Verify direction is displayed.",
            "5. Verify direction updates when coordinates change."
        ],
        "expectedResult": "The CoordinateSystem correctly computes and displays the direction between two coordinates.",
        "testCaseID": 66,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate."
        ]
    },
    {
        "Requirement": "When given two coordinates the CoordinateSystem shall compute the distance between them.",
        "testObjective": "Verify that when given two coordinates the CoordinateSystem computes the distance between them.",
        "preconditions": [
            "The application must be running.",
            "Two valid coordinate pairs are provided."
        ],
        "testSteps": [
            "1. Add two valid coordinate pairs.",
            "2. As a system compute the distance between them.",
            "3. Verify that CoordinateSystem displays the computed distance."
        ],
        "expectedResult": "CoordinateSystem computes and displays the correct distance between the two coordinates.",
        "testCaseID": 67,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When given two coordinates the CoordinateSystem shall compute the distance between them."
        ]
    },
    {
        "Requirement": "When requested the CoordinateSystem shall transform coordinates to alternate formats.",
        "testObjective": "Verify that when the CoordinateSystem is requested to transform coordinates, it successfully transforms them to alternate formats.",
        "preconditions": [
            "The CoordinateSystem is configured to support alternate coordinate formats."
        ],
        "testSteps": [
            "1. Add coordinates in one format.",
            "2. Request transformation to an alternate format.",
            "3. Verify that the transformed coordinates are correctly displayed."
        ],
        "expectedResult": "The CoordinateSystem successfully transforms the coordinates to the alternate format and displays the result correctly.",
        "testCaseID": 68,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested  the CoordinateSystem shall transform coordinates to alternate formats."
        ]
    },
    {
        "Requirement": "When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude it shall be specified in the flight route.",
        "testObjective": "Verify that when a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude it shall be specified in the flight route.",
        "preconditions": [
            "The system's default takeoff altitude must be known.",
            "A flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude."
        ],
        "testSteps": [
            "1. Identify a flight route that requires a customized takeoff altitude.",
            "2. Verify that the flight route's takeoff altitude is set to the customized value.",
            "3. As a system administrator, verify that the default takeoff altitude is different from the flight route's takeoff altitude."
        ],
        "expectedResult": "The flight route includes the specified customized takeoff altitude, and the system's default takeoff altitude is different.",
        "testCaseID": 69,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route."
        ]
    },
    {
        "Requirement": "The FlightRouteManager shall persist flight routes.",
        "testObjective": "Verify that the FlightRouteManager persists flight routes.",
        "preconditions": [
            "The application must be running.",
            "Flight routes must be configured.",
            "There are flight routes to be persisted."
        ],
        "testSteps": [
            "1. Add flight routes.",
            "2. Verify that flight routes are persisted.",
            "3. Log out and log back in.",
            "4. Verify that flight routes still exist."
        ],
        "expectedResult": "Flight routes are successfully persisted and remain after logout and login.",
        "testCaseID": 70,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The FlightRouteManager shall persist flight routes."
        ]
    },
    {
        "testCaseID": 71,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}."
        ]
    },
    {
        "Requirement": "When the return to home command is issued the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.",
        "testObjective": "Verify that when the return to home command is issued the FlightManager returns the UAV to its original launch location without issuing any additional waypoint or routing commands.",
        "preconditions": [
            "The application must be in a logged-in state with the UAV launched and tracked.",
            "The return to home command is issued via the appropriate interface.",
            "The original launch location has been set as the home location for the UAV."
        ],
        "testSteps": [
            "1. The user issues the return to home command.",
            "2. The FlightManager receives the command.",
            "3. The FlightManager calculates the path from current location to the original launch location without issuing any additional waypoints or routing commands.",
            "4. The UAV is returned to the original launch location."
        ],
        "expectedResult": "The UAV is successfully returned to the original launch location without any additional waypoint or routing commands issued by the FlightManager.",
        "testCaseID": 72,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands."
        ]
    },
    {
        "Requirement": "When the GCS loses the connection to an UAV the GCS shall attempt to reconnect.",
        "testObjective": "Verify that when the GCS loses the connection to an UAV the GCS attempts to reconnect.",
        "preconditions": [
            "The GCS is running.",
            "An UAV is currently connected to the GCS."
        ],
        "testSteps": [
            "1. Establish a connection between the GCS and an UAV.",
            "2. The GCS loses the connection to the UAV.",
            "3. The GCS attempts to reconnect to the UAV.",
            "4. The GCS waits for a successful connection re-establishment."
        ],
        "expectedResult": "The GCS successfully reconnects to the UAV after losing the initial connection.",
        "testCaseID": 73,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect"
        ]
    },
    {
        "Requirement": "The UAVActivationManager shall only activate UAVs that are registered.",
        "testObjective": "Verify that the UAVActivationManager only activates UAVs that are registered.",
        "preconditions": [
            "The application must be running.",
            "At least one registered UAV exists.",
            "The activation manager is enabled."
        ],
        "testSteps": [
            "1. Add a registered UAV.",
            "2. Ensure the activation manager is enabled.",
            "3. Verify that the activation manager only activates registered UAVs."
        ],
        "expectedResult": "The activation manager only activates registered UAVs.",
        "testCaseID": 74,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UAVActivationManager shall only activate UAVs that are registered."
        ]
    },
    {
        "Requirement": "When a GCS requests activation of a newly detected UAV the GCSMiddleware shall forward the request to Dronology.",
        "testObjective": "Verify that when a GCS requests activation of a newly detected UAV the GCSMiddleware forwards the request to Dronology.",
        "preconditions": [
            "The application must be running.",
            "A newly detected UAV has been identified.",
            "The GCS has the authority to activate the UAV."
        ],
        "testSteps": [
            "1. Add a newly detected UAV.",
            "2. As a GCS request activation.",
            "3. Verify that GCSMiddleware forwards the request to Dronology."
        ],
        "expectedResult": "The activation request is forwarded from GCSMiddleware to Dronology.",
        "testCaseID": 75,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology."
        ]
    },
    {
        "Requirement": "When a UAV has an active onboard Obstacle Avoidance then the ObstacleAvoidance system shall not issue directives",
        "testObjective": "Verify that when a UAV has active Obstacle Avoidance, the ObstacleAvoidance system does not issue directives.",
        "preconditions": [
            "The application must be running.",
            "A UAV is in flight with active Obstacle Avoidance enabled."
        ],
        "testSteps": [
            "1. Add a UAV to the application with active Obstacle Avoidance enabled.",
            "2. Observe the ObstacleAvoidance system.",
            "3. Verify that no directives are issued when Obstacle Avoidance is active."
        ],
        "expectedResult": "When a UAV has active Obstacle Avoidance, the ObstacleAvoidance system does not issue directives.",
        "testCaseID": 76,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives"
        ]
    },
    {
        "Requirement": "The ObjectAvoidance system only issues commands within the capabilities of the UAV",
        "testObjective": "Verify that the ObjectAvoidance system only issues commands within the capabilities of the UAV.",
        "preconditions": [
            "The ObjectAvoidance system is operational.",
            "The UAV has defined capabilities."
        ],
        "testSteps": [
            "1. Add a new UAV with defined capabilities.",
            "2. Activate the ObjectAvoidance system.",
            "3. Observe if the ObjectAvoidance system issues commands within the capabilities of the UAV."
        ],
        "expectedResult": "The ObjectAvoidance system issues commands within the capabilities of the UAV without exceeding them.",
        "testCaseID": 77,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The ObjectAvoidance system only issues commands within the capabilities of the UAV"
        ]
    },
    {
        "testCaseID": 78,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination"
        ]
    },
    {
        "Requirement": "When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV.",
        "testObjective": "Verify that when a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system issues evasive directives to the UAV.",
        "preconditions": [
            "The application must be running.",
            "There exists a UAV in operation.",
            "A stationary or moving object is within the proximity of the UAV."
        ],
        "testSteps": [
            "1. Ensure there is a UAV in operation.",
            "2. Introduce a stationary or moving object within the proximity of the UAV.",
            "3. Wait for the ObjectAvoidance system to issue evasive directives.",
            "4. Verify that the evasive directives are issued by the ObjectAvoidance system."
        ],
        "expectedResult": "The evasive directives are issued by the ObjectAvoidance system when a stationary or moving object is detected in proximity of a UAV.",
        "testCaseID": 79,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV"
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall display the location of active UAVs as icons on the map.",
        "testObjective": "Verify that the RealTimeFlightUI displays the location of active UAVs as icons on the map.",
        "preconditions": [
            "The application must be running.",
            "There are active UAVs to display."
        ],
        "testSteps": [
            "1. Open the application.",
            "2. As an admin, enable a flight plan.",
            "3. As a user, join the flight plan.",
            "4. As a user, check the map.",
            "5. Verify that active UAVs are displayed as icons."
        ],
        "expectedResult": "The RealTimeFlightUI shows active UAVs as icons on the map.",
        "testCaseID": 80,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall display the location of active UAVs as icons on the map."
        ]
    },
    {
        "Requirement": "When the RealTimeFlightUI is loaded a map shall be displayed.",
        "testObjective": "Verify that when RealTimeFlightUI is loaded a map is displayed.",
        "preconditions": [
            "The application must be running.",
            "The RealTimeFlightUI is loaded."
        ],
        "testSteps": [
            "1. Load the RealTimeFlightUI.",
            "2. Wait until a map is displayed."
        ],
        "expectedResult": "A map is displayed.",
        "testCaseID": 81,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When the RealTimeFlightUI is loaded  a map shall be displayed."
        ]
    },
    {
        "testCaseID": 82,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV."
        ]
    },
    {
        "Requirement": "The UIMiddleware shall only assign one control-client at a time for each UAV.",
        "testObjective": "Verify that the UIMiddleware assigns only one control-client per UAV at any given time.",
        "preconditions": [
            "The application must be running.",
            "At least one UAV is in operation.",
            "No active control-client is assigned to any UAV."
        ],
        "testSteps": [
            "1. Add a new UAV to the system.",
            "2. Assign a control-client to it.",
            "3. Assign another control-client to it.",
            "4. Observe that the UIMiddleware reassigns the control-client when a new one is attempted."
        ],
        "expectedResult": "The UIMiddleware assigns only one control-client per UAV, and reassigns when a new one is attempted.",
        "testCaseID": 83,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall only assign one control-client at a time for each UAV."
        ]
    },
    {
        "Requirement": "The UIMiddleware shall provide an interface for registering UI clients.",
        "testObjective": "Verify that the UIMiddleware provides an interface for registering UI clients.",
        "preconditions": [
            "The application must be running.",
            "A UI client needs to register with the middleware."
        ],
        "testSteps": [
            "1. Add a UI client.",
            "2. Connect the UI client to the middleware.",
            "3. Verify that the UI client is registered with the middleware."
        ],
        "expectedResult": "The UI client is registered with the middleware.",
        "testCaseID": 84,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall provide an interface for registering UI clients."
        ]
    },
    {
        "Requirement": "When a UAV's current flight is cancelled the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.",
        "testObjective": "Verify that when a UAV's current flight is cancelled the SingleUAVFlightPlanScheduler cancels all scheduled flight plans for that UAV.",
        "preconditions": [
            "The application must be in a state where a UAV has a current flight scheduled.",
            "The SingleUAVFlightPlanScheduler is enabled.",
            "The current flight is cancelled."
        ],
        "testSteps": [
            "1. Add a flight plan for a UAV.",
            "2. As a system, cancel the current flight.",
            "3. Wait until all scheduled flight plans for that UAV are cancelled.",
            "4. Verify that the SingleUAVFlightPlanScheduler has cancelled all scheduled flight plans for that UAV."
        ],
        "expectedResult": "All scheduled flight plans for that UAV have been cancelled.",
        "testCaseID": 85,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV."
        ]
    },
    {
        "Requirement": "If a UAV has pending flight plans then when it reaches the final waypoint of its current flight plan the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.",
        "testObjective": "Verify that when a UAV reaches the final waypoint of its current flight plan the SingleUAVFlightPlanScheduler executes the next assigned flight plan.",
        "preconditions": [
            "The application must be running.",
            "One or more flight plans are pending.",
            "A UAV is currently at the final waypoint of its current flight plan."
        ],
        "testSteps": [
            "1. Add one or more flight plans.",
            "2. Ensure a UAV is at the final waypoint of its current flight plan.",
            "3. Execute the next assigned flight plan and verify it's executed correctly."
        ],
        "expectedResult": "The SingleUAVFlightPlanScheduler successfully executes the next assigned flight plan after the UAV reaches its final waypoint.",
        "testCaseID": 86,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan."
        ]
    },
    {
        "testCaseID": 87,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution."
        ]
    },
    {
        "Requirement": "The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.",
        "testObjective": "Verify that the SingleUAVFlightPlanScheduler maintains a managed list of pending flight plans for each UAV.",
        "preconditions": [
            "The application must be running.",
            "At least one UAV is operational.",
            "There are one or more pending flight plans assigned to the operational UAV."
        ],
        "testSteps": [
            "1. Add a pending flight plan to the operational UAV.",
            "2. As the system manages the flight plans, the pending flight plans are maintained in a managed list.",
            "3. Verify that the pending flight plans are still present in the managed list after a period of inactivity.",
            "4. Remove a pending flight plan from the operational UAV.",
            "5. As the system manages the flight plans, the pending flight plan is removed from the managed list.",
            "6. Verify that the pending flight plan is no longer present in the managed list."
        ],
        "expectedResult": "The managed list of pending flight plans for each UAV is maintained and accurately reflects the current state of pending flight plans assigned to operational UAVs.",
        "testCaseID": 88,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV."
        ]
    },
    {
        "testCaseID": 89,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV."
        ]
    },
    {
        "testCaseID": 90,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude."
        ]
    },
    {
        "testCaseID": 91,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes."
        ]
    },
    {
        "Requirement": "The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.",
        "testObjective": "Verify that the UAVActivationManager ensures only one active instance of each registered drone at any time.",
        "preconditions": [
            "The application must be running.",
            "There is at least one registered drone with an active instance."
        ],
        "testSteps": [
            "1. Register a drone.",
            "2. Register another drone.",
            "3. Check that the first registered drone is active.",
            "4. Check that only one active instance exists for each drone."
        ],
        "expectedResult": "Only one active instance per registered drone is maintained by the UAVActivationManager.",
        "testCaseID": 92,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time."
        ]
    },
    {
        "Requirement": "The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.",
        "testObjective": "Verify that the SingleUAVFlightPlanScheduler only executes one flight plan at a time for each UAV.",
        "preconditions": [
            "The application must be in a state where multiple flight plans are available.",
            "At least one UAV is assigned to the scheduler."
        ],
        "testSteps": [
            "1. Add multiple flight plans.",
            "2. As the scheduler, assign a single UAV.",
            "3. Verify that only one flight plan is being executed.",
            "4. As the scheduler, assign the same UAV again.",
            "5. Verify that only the previously assigned flight plan is being executed."
        ],
        "expectedResult": "The SingleUAVFlightPlanScheduler executes only one flight plan per UAV at a time.",
        "testCaseID": 93,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV."
        ]
    },
    {
        "Requirement": "The VehicleCore shall assign a unique ID to each activated UAV.",
        "testObjective": "Verify that the VehicleCore assigns a unique ID to each activated UAV.",
        "preconditions": [
            "The application must be running.",
            "At least two UAVs are activated.",
            "The ID assignment mechanism is functional."
        ],
        "testSteps": [
            "1. Activate first UAV.",
            "2. Activate second UAV.",
            "3. Verify that each activated UAV has a unique ID assigned."
        ],
        "expectedResult": "Each activated UAV has a unique ID assigned without duplication.",
        "testCaseID": 94,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall assign a unique ID to each activated UAV."
        ]
    },
    {
        "Requirement": "When a client registers for notifications the UIMiddleware shall send notifications for specific events.",
        "testObjective": "Verify that when a client registers for notifications the UIMiddleware sends notifications for specific events.",
        "preconditions": [
            "The application must be running.",
            "A client has registered for notifications."
        ],
        "testSteps": [
            "1. As a client, register for notifications.",
            "2. As a client, trigger an event.",
            "3. Wait until UIMiddleware sends a notification."
        ],
        "expectedResult": "Notifications are sent by UIMiddleware when specific events are triggered after client registration.",
        "testCaseID": 95,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. If a client registers for notifications  the UIMiddleware shall send notifications for specific events"
        ]
    },
    {
        "testCaseID": 96,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "The experts shall generate json test description for the following requirement. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram"
        ]
    }
]