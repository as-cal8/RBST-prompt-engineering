[
    {
        "Requirement": "When the MapComponent receives a request to switch map layers, it shall display the new layer type on the map.",
        "testObjective": "Verify that the MapComponent correctly switches map layers such as terrain and satellite.",
        "preconditions": [
            "The MapComponent is initialized with a default map layer."
        ],
        "testSteps": [
            "1. Switch a request to display terrain layer.",
            "2. Switch a request to display satellite layer.",
            "3. Verify that the displayed map reflects the selected layer."
        ],
        "expectedResult": "The MapComponent displays the correct map layer based on the request.",
        "testCaseID": 0,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)"
        ]
    },
    {
        "testObjective": "Verify that the MissionPlanner can execute flight plans for multiple UAVs concurrently.",
        "preconditions": [
            "The application must be running.",
            "Multiple flight plans are defined.",
            "At least two UAVs are registered."
        ],
        "testSteps": [
            "1. Add flight plans for multiple UAVs.",
            "2. Initiate execution of all flight plans simultaneously.",
            "3. Monitor the execution of each flight plan without interference."
        ],
        "expectedResult": "All flight plans are executed concurrently for each registered UAV.",
        "additionalInformation": "Ensure that the MissionPlanner can handle simultaneous execution without conflicts.",
        "testCaseID": 1,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The MissionPlanner shall execute flight plans for multiple UAVs concurrently."
        ]
    },
    {
        "Requirement": "The GCS shall transmit the UAV's properties to the GCSMiddleware.",
        "testObjective": "Verify that the GCS transmits the UAV's properties to the GCSMiddleware.",
        "preconditions": [
            "The application must be running.",
            "A GCS is present and operational."
        ],
        "testSteps": [
            "1. Activate the GCS.",
            "2. Ensure the GCS is connected to the GCSMiddleware.",
            "3. Retrieve the UAV's properties from the GCS.",
            "4. Check that the GCSMiddleware receives and processes these properties."
        ],
        "expectedResult": "The GCS successfully transmits the UAV's properties to the GCSMiddleware.",
        "testCaseID": 2,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The GCS shall transmit the UAV's properties to the GCSMiddleware"
        ]
    },
    {
        "testCaseID": 3,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The GCS shall transmit the UAV's current location to the GCSMiddleware"
        ]
    },
    {
        "testObjective": "Verify that when a new UAV is connected to the GCS, the GCS reports it to the GCSMiddleware.",
        "preconditions": [
            "The application must be running.",
            "One or more UAVs are connected to the GCS."
        ],
        "testSteps": [
            "1. Connect a new UAV to the GCS.",
            "2. Wait for the GCS to report the new UAV.",
            "3. Verify that the GCSMiddleware receives the report."
        ],
        "expectedResult": "The GCS has successfully reported the newly connected UAV to the GCSMiddleware.",
        "testCaseID": 4,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The GCS shall report newly connected UAVs to the GCSMiddleware."
        ]
    },
    {
        "testObjective": "Verify that the GCS assigns a message frequency to all active UAVs.",
        "preconditions": [
            "The application must be running.",
            "At least one UAV is active in the system."
        ],
        "testSteps": [
            "1. Activate a set of active UAVs.",
            "2. Observe the GCS interface for message frequency assignments."
        ],
        "expectedResult": "The GCS assigns a specific message frequency to each active UAV.",
        "testCaseID": 5,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The GCS shall assign a message frequency for all UAVs."
        ]
    },
    {
        "testObjective": "Verify that when the GCS receives a UAV command from the GCSMiddleware, the GCS forwards the command to the respective UAV.",
        "preconditions": [
            "The GCS must be operational.",
            "The GCSMiddleware must be operational.",
            "A valid UAV must be selected or available.",
            "The communication between GCS and GCSMiddleware is active."
        ],
        "testSteps": [
            "1. The GCS receives a command from the GCSMiddleware.",
            "2. The GCS checks if the command is intended for a specific UAV.",
            "3. If the command is intended for a specific UAV, the GCS forwards the command to that UAV.",
            "4. If the command is not intended for a specific UAV, the GCS forwards the command to all available UAVs.",
            "5. The respective UAV receives and executes the command.",
            "6. The communication between GCS and the respective UAV is confirmed to be established after the command is forwarded.",
            "7. Verify that the command was executed correctly by the respective UAV.",
            "8. Verify that the GCS has properly forwarded the command to the respective UAV."
        ],
        "expectedResult": "The GCS command was correctly forwarded to the respective UAV, and the command was executed as intended by the UAV.",
        "testCaseID": 6,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV."
        ]
    },
    {
        "testObjective": "Verify that when the connection to the GCS is lost from the GCSMiddleware, the GCSMiddleware notifies Dronology and deactivates all associated UAVs.",
        "preconditions": [
            "The GCS is disconnected from the GCSMiddleware."
        ],
        "testSteps": [
            "1. Establish a disconnected state between the GCS and GCSMiddleware."
        ],
        "testCaseID": 7,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs."
        ]
    },
    {
        "testObjective": "Verify that when a command is sent from Dronology to the GCS, the GCSMiddleware forwards the command to the respective GCS.",
        "preconditions": [
            "The application must be running.",
            "Dronology is sending a command to the GCS."
        ],
        "testSteps": [
            "1. Dronology sends a command to the GCS.",
            "2. GCS receives the command from Dronology.",
            "3. GCSMiddleware receives the command from GCS.",
            "4. GCSMiddleware forwards the command to the respective GCS component."
        ],
        "expectedResult": "The command is successfully forwarded from Dronology to the GCS via GCSMiddleware.",
        "testCaseID": 8,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware shall forward commands sent from Dronology to a GCS"
        ]
    },
    {
        "testObjective": "Verify that the GCSMiddleware handles state, monitoring, and mode change messages received from the GCS.",
        "preconditions": [
            "The GCS must be operational and sending messages",
            "The GCSMiddleware must be configured properly",
            "A communication link exists between the GCS and GCSMiddleware"
        ],
        "testSteps": [
            "1. The GCS sends a state message containing information about the current operational state of a GCS.",
            "2. The GCS sends a monitoring message detailing system status and operational metrics.",
            "3. The GCS sends a mode change message requesting a change in the operational mode.",
            "4. The GCSMiddleware receives and processes these messages.",
            "5. The GCSMiddleware triggers the appropriate actions based on the received messages.",
            "6. Verify that all messages are processed and actions are triggered correctly.",
            "7. Repeat the process for multiple messages to ensure consistency and reliability."
        ],
        "expectedResult": "All messages are correctly processed and corresponding actions are triggered by the GCSMiddleware.",
        "testCaseID": 9,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS."
        ]
    },
    {
        "Requirement": "The GCSMiddleware shall follow a predefined set of steps to establish a connection between a GCS and Dronology.",
        "testObjective": "Verify that the GCSMiddleware establishes a connection with Dronology as per predefined steps.",
        "preconditions": [
            "The GCS is configured with the necessary details to connect to Dronology.",
            "Dronology is running and available for communication."
        ],
        "testSteps": [
            "1. The GCS sends a connection request to Dronology.",
            "2. Dronology responds to the connection request.",
            "3. The GCS waits for a confirmation from Dronology.",
            "4. The GCS waits for a confirmation from the GCSMiddleware.",
            "5. The GCS sends a connection confirmation to the GCSMiddleware."
        ],
        "expectedResult": "A successful connection between the GCSMiddleware and Dronology is established with confirmation from both parties.",
        "testCaseID": 10,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology"
        ]
    },
    {
        "testObjective": "Verify that the GCSMiddleware can handle multiple GCS components.",
        "preconditions": [
            "The application must have multiple GCS components connected to it.",
            "The application must be running."
        ],
        "testSteps": [
            "1. Connect a first GCS component to the GCSMiddleware.",
            "2. Connect a second GCS component to the GCSMiddleware.",
            "3. Send a command to the GCSMiddleware.",
            "4. Verify that the command is received by both GCS components.",
            "5. Disconnect one GCS component from the GCSMiddleware.",
            "6. Verify that the disconnected GCS component no longer receives commands."
        ],
        "expectedResult": "All connected GCS components receive and process commands from the GCSMiddleware successfully, and when disconnected, they no longer receive commands.",
        "testCaseID": 11,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The GCSMiddleware shall handle multiple GCS"
        ]
    },
    {
        "Requirement": "The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component.",
        "testObjective": "Verify that the DronologyRuntimeMonitor receives messages from all Dronology components.",
        "preconditions": [
            "The application must be running.",
            "Dronology components are operational and sending messages."
        ],
        "testSteps": [
            "1. Identify all Dronology components.",
            "2. Send a test message from each component.",
            "3. Verify that the DronologyRuntimeMonitor receives the messages."
        ],
        "expectedResult": "All messages are received by the DronologyRuntimeMonitor.",
        "testNotes": "Ensure that the DronologyRuntimeMonitor is configured properly to listen for messages from all components",
        "testCaseID": 12,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component"
        ]
    },
    {
        "Requirement": "When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients.",
        "testObjective": "Verify that when a new monitoring message is received the DronologyRuntimeMonitor forwards the message to all subscribed clients.",
        "preconditions": [
            "The DronologyRuntimeMonitor is configured correctly."
        ],
        "testSteps": [
            "1. A new monitoring message is received.",
            "2. The DronologyRuntimeMonitor checks if there are subscribed clients.",
            "3. The DronologyRuntimeMonitor forwards the message to all subscribed clients."
        ],
        "expectedResult": "The monitoring message is received by all subscribed clients.",
        "testCaseID": 13,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients"
        ]
    },
    {
        "Requirement": "When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients.",
        "testObjective": "Verify that when a new monitoring message is received the DronologyRuntimeMonitor forwards the message to all subscribed clients.",
        "preconditions": [
            "The DronologyRuntimeMonitor is operational.",
            "Dronology is operational."
        ],
        "testSteps": [
            "1. Send a new monitoring message to the DronologyRuntimeMonitor.",
            "2. Ensure that all subscribed clients receive the monitoring message.",
            "3. Verify that the message is received by at least one client."
        ],
        "expectedResult": "A new monitoring message is received by all subscribed clients.",
        "testCaseID": 14,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients"
        ]
    },
    {
        "testObjective": "Verify that when an emergency occurs, the RealTimeFlightUI notifies users.",
        "preconditions": [
            "The application must be running.",
            "At least one user is logged in."
        ],
        "testSteps": [
            "1. Initiate an emergency condition in the system.",
            "2. Observe if the RealTimeFlightUI displays an emergency notification.",
            "3. Verify that the notification includes the necessary emergency information."
        ],
        "expectedResult": "The RealTimeFlightUI displays a clear and accurate emergency notification with all required information.",
        "additionalNotes": [
            "The test should be repeatable to ensure consistent results.",
            "The emergency condition can be triggered through various methods, such as a hardware failure simulation or a manual input in the system."
        ],
        "testCaseID": 15,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall notify users when an emergency occurs."
        ]
    },
    {
        "testObjective": "Verify that users can follow one or multiple UAVs on the map using the RealTimeFlightUI.",
        "preconditions": [
            "The application must be running.",
            "At least one UAV must be active.",
            "The map must be loaded and ready for use."
        ],
        "testSteps": [
            "1. Add a new UAV to the application.",
            "2. Launch a flight plan for the added UAV.",
            "3. Open the RealTimeFlightUI.",
            "4. Click on the new UAV's name.",
            "5. Verify that the UAV's marker appears on the map.",
            "6. Add another UAV and repeat steps 2-5 for the second UAV.",
            "7. Try following both UAVs simultaneously.",
            "8. Observe the map display to ensure both markers are visible and active."
        ],
        "expectedResult": "The RealTimeFlightUI displays markers for each added UAV on the map, allowing users to follow them.",
        "testCaseID": 16,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map."
        ]
    },
    {
        "testObjective": "Verify that when a user performs emergency operations on a group of UAVs, the RealTimeFlightUI allows them to hover or send them to home.",
        "preconditions": [
            "The application must be running.",
            "A group of one or more UAVs is present on the map.",
            "The user has selected a group of UAVs to perform emergency operations."
        ],
        "testSteps": [
            "1. Add a group of UAVs to the map.",
            "2. As a user performs an emergency operation, such as hovering or sending to home.",
            "3. Observe the UI changes to reflect the operation's outcome.",
            "4. Verify that the group of UAVs is in the expected state after the operation."
        ],
        "expectedResult": "The group of UAVs is successfully hovered or returned to home as per the emergency operation performed.",
        "testCaseID": 17,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs"
        ]
    },
    {
        "testObjective": "Verify that users can apply flight operations to one or more selected UAVs using the RealTimeFlightUI.",
        "preconditions": [
            "The application must be running.",
            "The RealTimeFlightUI must be loaded.",
            "At least one UAV must be selected."
        ],
        "testSteps": [
            "1. Select one or more UAVs from the list of active UAVs.",
            "2. Initiate the flight operation command for the selected UAVs.",
            "3. Observe the UI displaying the applied flight operation.",
            "4. Verify that the flight operation is successfully executed for the selected UAVs."
        ],
        "expectedResult": "Flight operations are applied successfully to the selected one or more UAVs.",
        "testCaseID": 18,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs."
        ]
    },
    {
        "testObjective": "Verify that the RealTimeFlightUI displays all currently active flight plans on the map.",
        "preconditions": [
            "The application must be running.",
            "Flight plans must be active."
        ],
        "testSteps": [
            "1. Add flight plans.",
            "2. Ensure flight plans are active.",
            "3. Verify the map displays active flight plans."
        ],
        "expectedResult": "All active flight plans are visible on the map.",
        "testCaseID": 19,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall display all currently active flight plans on the map."
        ]
    },
    {
        "Requirement": "The RealTimeFlightUI shall display the name and status of all currently activated UAVs.",
        "testObjective": "Verify that the RealTimeFlightUI displays the name and status of all currently activated UAVs.",
        "preconditions": [
            "The application must be running.",
            "There are currently activated UAVs."
        ],
        "testSteps": [
            "1. Launch the application.",
            "2. Ensure there are currently activated UAVs.",
            "3. Observe the RealTimeFlightUI.",
            "4. Verify that the displayed names and statuses match the currently activated UAVs."
        ],
        "expectedResult": "The RealTimeFlightUI displays the correct names and statuses for all currently activated UAVs.",
        "FailCondition": "The RealTimeFlightUI does not display all currently activated UAVs correctly.",
        "testCaseID": 20,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall display the name and status of all currently activated UAVs"
        ]
    },
    {
        "testObjective": "Verify that when the RouteCreationUI is loaded, a list of all existing routes is displayed.",
        "preconditions": [
            "The application must be running.",
            "There are existing routes defined."
        ],
        "testSteps": [
            "1. Launch the application.",
            "2. Navigate to the RouteCreationUI.",
            "3. Verify that a list of all existing routes is displayed."
        ],
        "expectedResult": "The RouteCreationUI displays a list of all existing routes.",
        "testCaseID": 21,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When the RouteCreationUI is loaded a list of all existing routes shall be displayed."
        ]
    },
    {
        "testObjective": "Verify that when a user deletes a route from the RouteCreationUI, the route is successfully removed.",
        "preconditions": [
            "The RouteCreationUI is open and displaying routes."
        ],
        "testSteps": [
            "1. Add a new route with waypoints and parameters.",
            "2. Select the route to be deleted.",
            "3. Click the 'Delete' button in the RouteCreationUI.",
            "4. Verify that the selected route is no longer displayed in the RouteCreationUI."
        ],
        "expectedResult": "The deleted route is successfully removed from the UI.",
        "testCaseID": 22,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall allow a user to delete a route."
        ]
    },
    {
        "testObjective": "Verify that the RouteCreationUI allows users to create and modify routes.",
        "preconditions": [
            "The application must be running.",
            "At least one GCS is operational."
        ],
        "testSteps": [
            "1. Open the RouteCreationUI.",
            "2. Click the 'Create New Route' button.",
            "3. Input route details in the text field.",
            "4. Click 'Save' to register the route.",
            "5. Modify an existing route by editing its details.",
            "6. Save the modified route.",
            "7. Verify that both the original and modified routes are displayed."
        ],
        "expectedResult": "The RouteCreationUI displays both the newly created and modified routes accurately.",
        "testCaseID": 23,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall allow the user to create and modify a route."
        ]
    },
    {
        "testObjective": "Verify that when a user creates or modifies a route, the updated route is sent to Dronology.",
        "preconditions": [
            "The RouteCreationUI is open",
            "At least one route exists in the system"
        ],
        "testSteps": [
            "1. Create or modify a route in the RouteCreationUI",
            "2. Wait until Dronology receives the updated route.",
            "3. Verify that the route has been transmitted to Dronology."
        ],
        "expectedResult": "The updated route is successfully sent to Dronology.",
        "testCaseID": 24,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When requested  the RouteCreationUI shall send a newly created or modified route to dronology."
        ]
    },
    {
        "testCaseID": 25,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI."
        ]
    },
    {
        "testObjective": "Verify that the RouteCreationUI only accepts valid altitude and speed values for waypoints.",
        "preconditions": [
            "The application must be running.",
            "A valid route creation UI is loaded."
        ],
        "testSteps": [
            "1. Open the RouteCreationUI.",
            "2. Enter waypoints with invalid altitude or speed values.",
            "3. Observe if the RouteCreationUI rejects the entered waypoints.",
            "4. Enter waypoints with valid altitude and speed values.",
            "5. Verify that the RouteCreationUI accepts the entered waypoints and displays them correctly."
        ],
        "expectedResult": "The RouteCreationUI correctly rejects waypoints with invalid altitude or speed values and accepts waypoints with valid altitude and speed values.",
        "testDescription": "The test ensures that the RouteCreationUI enforces valid altitude and speed constraints for waypoints, preventing invalid inputs from being accepted.",
        "testCaseID": 26,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall only accept valid altitude and speed values for waypoint."
        ]
    },
    {
        "testObjective": "Verify that the RouteCreationUI distinguishes between starting, ending, and intermediate waypoint markers.",
        "preconditions": [
            "The application must be running.",
            "A route is being created or modified in the RouteCreationUI."
        ],
        "testSteps": [
            "1. Add a new route to the RouteCreationUI.",
            "2. Select a starting waypoint and add it to the route.",
            "3. Select an ending waypoint and add it to the route.",
            "4. Select intermediate waypoints and add them to the route.",
            "5. Verify that the starting, ending, and intermediate waypoints are displayed with distinct markers in the RouteCreationUI.",
            "6. Modify the route by adjusting the waypoints.",
            "7. Verify that the waypoint markers are appropriately updated to reflect any changes.",
            "8. Test the removal of waypoints from the route.",
            "9. Verify that the waypoint markers correctly disappear when waypoints are removed.",
            "10. Test the insertion of new waypoints into the route.",
            "11. Verify that the new waypoints are correctly displayed with their respective markers in the RouteCreationUI."
        ],
        "expectedResult": "All waypoint markers are correctly identified and displayed according to their type (starting, ending, intermediate).",
        "testCaseID": 27,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers."
        ]
    },
    {
        "testObjective": "Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.",
        "preconditions": [
            "The application must be running.",
            "One or more flight plans are pending."
        ],
        "testSteps": [
            "1. Add one or more flight plans.",
            "2. As a user cancel a flight plan.",
            "3. Wait until RouteAssignmentUI notifies Dronology."
        ],
        "expectedResult": "Flight plan is canceled and Dronology received notification from RouteAssignmentUI.",
        "testCaseID": 28,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology."
        ]
    },
    {
        "testObjective": "Verify that users can reorder routes or remove flight plans assigned to a UAV without starting execution.",
        "preconditions": [
            "The system is in a state where flight plans are assigned to a UAV and routes are listed.",
            "Flight plans must be completed or canceled before reordering or removal."
        ],
        "testSteps": [
            "1. Add flight plan A to UAV 1.",
            "2. Add flight plan B to UAV 1.",
            "3. Select flight plan A and reorder it to the top.",
            "4. Select flight plan B and remove it from UAV 1.",
            "5. Verify that flight plans are reordered or removed without execution.",
            "6. Attempt to reorder or remove a flight plan that is currently in execution and observe failure.",
            "7. Reset to initial state and repeat tests."
        ],
        "expectedResult": "Flight plans can be reordered or removed from a UAV without initiating execution.",
        "testCaseID": 29,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution."
        ]
    },
    {
        "testObjective": "Verify that when a UAV is selected the RouteAssignmentUI displays its active flight plans.",
        "preconditions": [
            "The application must be running.",
            "At least one UAV must be active.",
            "The selected UAV must be properly registered."
        ],
        "testSteps": [
            "1. Select a UAV from the list.",
            "2. Observe the RouteAssignmentUI.",
            "3. Verify that all active flight plans for the selected UAV are displayed."
        ],
        "expectedResult": "The RouteAssignmentUI shows all active flight plans for the selected UAV.",
        "actualResult": "The RouteAssignmentUI shows all active flight plans for the selected UAV.",
        "stepsToProduceActualResult": "The application ensures that flight plans are assigned to each active UAV.",
        "failedSteps": [],
        "failedReasons": [],
        "notes": "Ensure that the RouteAssignmentUI correctly displays flight plans only for selected UAVs and hides others.",
        "testCaseID": 30,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans."
        ]
    },
    {
        "testObjective": "Verify that when a user selects a UAV in the RouteAssignmentUI, the UI displays detailed information about the selected UAV and its associated flight plans.",
        "preconditions": [
            "The application must be running.",
            "A UAV must be selected in the RouteAssignmentUI."
        ],
        "testSteps": [
            "1. Open the RouteAssignmentUI.",
            "2. Select a UAV from the list of available UAVs.",
            "3. Verify that the selected UAV's details, including its name, type, and current flight plans, are displayed.",
            "4. Check that all associated flight plans for the selected UAV are visible.",
            "5. Ensure that the flight plans have the necessary details such as waypoints, altitude, and speed."
        ],
        "testCaseID": 31,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans."
        ]
    },
    {
        "testObjective": "Verify that when a route is assigned or removed from a UAV the RouteAssignmentUI notifies Dronology.",
        "preconditions": [
            "The application must be running.",
            "A valid route exists.",
            "A UAV is selected.",
            "The route is assigned or removed from the UAV."
        ],
        "testSteps": [
            "1. Add a new route.",
            "2. Select a UAV and assign the route to it.",
            "3. Wait for RouteAssignmentUI to notify Dronology.",
            "4. Remove the route from the selected UAV.",
            "5. Wait for RouteAssignmentUI to notify Dronology."
        ],
        "expectedResult": "The RouteAssignmentUI notifies Dronology upon assigning and unassigning a route from a UAV.",
        "additionalNotes": "Ensure that the notification occurs both when assigning and unassigning routes.",
        "testCaseID": 32,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology."
        ]
    },
    {
        "testObjective": "Verify that the RouteAssignmentUI allows users to select and assign routes to a UAV.",
        "preconditions": [
            "The application must be running.",
            "At least one route is available for assignment."
        ],
        "testSteps": [
            "1. Open the RouteAssignmentUI.",
            "2. Select an existing route from the route list.",
            "3. Select a UAV from the available list.",
            "4. Assign the selected route to the chosen UAV.",
            "5. Verify that the route is assigned and displayed correctly in the UI."
        ],
        "expectedResult": "The selected route is successfully assigned to the chosen UAV and appears in the RouteAssignmentUI.",
        "testDescription": "The RouteAssignmentUI provides functionality to select and assign routes to specific UAVs ensuring that each route is properly allocated and displayed.",
        "testCaseID": 33,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV."
        ]
    },
    {
        "testCaseID": 34,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When loading the map view it shall be positioned at the pre-defined location"
        ]
    },
    {
        "testObjective": "Verify that when the VaadinUI is activated, the VaadinUI is configured according to stored configuration parameters.",
        "preconditions": [
            "The application must be running."
        ],
        "testSteps": [
            "1. Activate the VaadinUI.",
            "2. Verify that the VaadinUI displays the stored configuration parameters."
        ],
        "expectedResult": "The VaadinUI is configured according to the stored configuration parameters.",
        "testCaseID": 35,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters."
        ]
    },
    {
        "testObjective": "Verify that the UIMiddleware accepts and activates a mission plan upon request.",
        "preconditions": [
            "The application must be running.",
            "A mission plan must be available.",
            "A request for activation must be made."
        ],
        "testSteps": [
            "1. Add a mission plan to the system.",
            "2. Make a request to activate the mission plan.",
            "3. Wait for the system to activate the mission plan."
        ],
        "expectedResult": "The mission plan is activated successfully.",
        "testCaseID": 36,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall accept and activate a mission plan upon request."
        ]
    },
    {
        "testObjective": "Verify that the UIMiddleware can assign an existing route to an active UAV.",
        "preconditions": [
            "The application must be running.",
            "At least one active UAV exists.",
            "At least one existing route is available."
        ],
        "testSteps": [
            "1. Add a new route to the system.",
            "2. Activate an existing UAV.",
            "3. Select the new route to be assigned.",
            "4. Attempt to assign the selected route to the active UAV.",
            "5. Verify that the route has been successfully assigned to the UAV.",
            "6. Deactivate the UAV and verify that the route is no longer available.",
            "7. Reactivate the UAV and verify that the route is now available for assignment."
        ],
        "expectedResult": "The selected route has been successfully assigned to the active UAV, and the route is available for further management.",
        "testDescription": "This test case verifies the UIMiddleware's capability to dynamically assign routes to active UAVs.",
        "additionalNotes": "Ensure that the route is properly configured with all necessary waypoints and altitude settings.",
        "testCaseID": 37,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall enable an existing route to be assigned to an active UAV."
        ]
    },
    {
        "testObjective": "Verify that the UIMiddleware enables the creation and modification of flight routes.",
        "preconditions": [
            "The application must be running.",
            "Flight routes must be enabled in the UIMiddleware."
        ],
        "testSteps": [
            "1. Access the RouteCreationUI.",
            "2. Initiate the creation of a new route.",
            "3. Input the route's textual description.",
            "4. Define the route's waypoints.",
            "5. Save the route.",
            "6. Modify an existing route's details.",
            "7. Save the modified route.",
            "8. Verify that the flight routes are updated in the system."
        ],
        "expectedResult": "Flight routes are successfully created and modified, and the system reflects these changes.",
        "testCaseID": 38,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall enable the creation and modification of flight routes"
        ]
    },
    {
        "Requirement": "The UIMiddleware shall accept commands from UIs and forwards them to Dronology.",
        "testObjective": "Verify that commands from UIs are correctly forwarded to Dronology via UIMiddleware.",
        "preconditions": [
            "The UI is functional",
            "Dronology is responsive",
            "UIMiddleware is configured correctly"
        ],
        "testSteps": [
            "1. Initiate a command from a UI component.",
            "2. Verify UIMiddleware receives the command.",
            "3. Confirm Dronology receives and processes the command."
        ],
        "expectedResult": "Commands are successfully forwarded from UI to Dronology through UIMiddleware.",
        "testCaseID": 39,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UIMiddleware accepts commands from UIs and forwards to Dronology"
        ]
    },
    {
        "Requirement": "The UIMiddleware shall provide a list of all existing routes.",
        "testObjective": "Verify that the UIMiddleware can display a list of all existing routes.",
        "preconditions": [
            "The application must be running.",
            "At least one route exists in the system."
        ],
        "testSteps": [
            "1. Launch the application.",
            "2. Verify that a list of routes is displayed on the interface.",
            "3. Click on the routes list to select a specific route."
        ],
        "expectedResult": "A list of all existing routes is displayed, and a selected route is highlighted.",
        "testNotes": "If no routes are present, the test should fail and display an appropriate message.",
        "testCaseID": 40,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall provide a list of all existing routes"
        ]
    },
    {
        "Requirement": "The UIMiddleware shall provide a list of all active UAVs.",
        "testObjective": "Verify that the UIMiddleware displays a list of all currently active UAVs.",
        "preconditions": [
            "The application must be running.",
            "There are active UAVs in the system."
        ],
        "testSteps": [
            "1. Initiate a request to the UIMiddleware for active UAVs.",
            "2. Observe the response containing a list of active UAVs.",
            "3. Verify that the list is up-to-date and accurate."
        ],
        "expectedResult": "The UIMiddleware correctly displays a list of all active UAVs",
        "testCaseID": 41,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall provide a list of all active UAVs"
        ]
    },
    {
        "testObjective": "Verify that all commands sent to and messages received from the CGS are logged by the ActivityLogger.",
        "preconditions": [
            "The application must be running.",
            "A CGS component must be connected to the system."
        ],
        "testSteps": [
            "1. Send a variety of commands to the CGS component.",
            "2. Verify that the ActivityLogger logs each command as received.",
            "3. Send a variety of messages to be received by the CGS component.",
            "4. Verify that the ActivityLogger logs each message as received.",
            "5. Ensure that the ActivityLogger captures both sent and received data accurately.",
            "6. Test the logging functionality under different network conditions.",
            "7. Verify that the ActivityLogger can handle simultaneous sending and receiving of data without corruption."
        ],
        "expectedResult": "All commands and messages are accurately logged by the ActivityLogger without any data loss or corruption.",
        "testCaseID": 42,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The ActivityLogger shall log all commands sent to and messages received from a CGS."
        ]
    },
    {
        "testObjective": "Verify that all flight plan related events are logged by the ActivityLogger.",
        "preconditions": [
            "The system must be running.",
            "Flight plans must be active and in use.",
            "The ActivityLogger must be configured to log flight plan related events."
        ],
        "testSteps": [
            "1. Initiate the activation of a flight plan for a UAV.",
            "2. Ensure the ActivityLogger is configured to log flight plan related events.",
            "3. Observe the ActivityLogger for flight plan related events such as start, execution, completion, and any anomalies.",
            "4. Verify that all flight plan related events are logged accurately and in the correct sequence."
        ],
        "expectedResult": "All flight plan related events are logged by the ActivityLogger accurately and in the correct sequence.",
        "testCaseID": 43,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The ActivityLogger shall log all flight plan related events."
        ]
    },
    {
        "testObjective": "Verify that the InternalSimulator approximates the battery state of a UAV.",
        "preconditions": [
            "The system has a battery state monitoring component",
            "The InternalSimulator is enabled to simulate battery behavior",
            "A UAV is selected for simulation"
        ],
        "testSteps": [
            "1. Select a specific UAV model for simulation.",
            "2. Initialize the battery state of the selected UAV in the InternalSimulator.",
            "3. Simulate a series of flight operations that drain the battery state.",
            "4. Capture the battery state readings at regular intervals.",
            "5. Analyze the simulated battery state data to verify accuracy against expected trends.",
            "6. Verify that the battery state trends in the simulation match the expected behavior based on flight operations."
        ],
        "expectedResult": "The battery state of the simulated UAV accurately reflects the expected trends based on the simulated flight operations.",
        "testCaseID": 44,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The InternalSimulator shall approximate the state of the battery"
        ]
    },
    {
        "testCaseID": 45,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude."
        ]
    },
    {
        "testCaseID": 46,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached."
        ]
    },
    {
        "testCaseID": 47,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude."
        ]
    },
    {
        "testObjective": "Verify that the InternalSimulator accurately approximates the behavior of a UAV.",
        "preconditions": [
            "The application must be running.",
            "A valid UAV model must be configured.",
            "A valid flight plan must be assigned to the UAV."
        ],
        "testSteps": [
            "1. Initialize the InternalSimulator with a specific UAV model.",
            "2. Assign a flight plan to the UAV using the assigned flight plan.",
            "3. Simulate flight operations, such as takeoff, waypoint navigation, and landing.",
            "4. Observe the simulated flight data, including altitude, speed, and location.",
            "5. Verify that the simulated flight data matches the expected behavior of a real UAV.",
            "6. Test edge cases, such as hover mode and abnormal flight termination.",
            "7. Log and review the simulation results for accuracy.",
            "8. Compare the simulated data with real-time flight data to ensure consistency."
        ],
        "expectedResult": "The InternalSimulator accurately reproduces the behavior of a UAV under various simulated conditions, including hover, takeoff, waypoint navigation, and landing.",
        "testCaseID": 48,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The InternalSimulator shall approximate the behavior of a UAV."
        ]
    },
    {
        "testCaseID": 49,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics"
        ]
    },
    {
        "testObjective": "Verify that when the maximum number of activated UAVs has been reached, the UAVActivationManager rejects any further activation requests.",
        "preconditions": [
            "The application must be running.",
            "The maximum number of allowed activated UAVs has been reached."
        ],
        "testSteps": [
            "1. Add a new UAV to the system.",
            "2. Check if the UAV ActivationManager rejects the activation request."
        ],
        "expectedResult": "The activation request is rejected, and no new UAV is activated.",
        "testCaseID": 50,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests."
        ]
    },
    {
        "Requirement": "When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans.",
        "testObjective": "Verify that when a UAV is deactivated the UAVActivationManager cancels all current and scheduled flight plans.",
        "preconditions": [
            "The application must be running.",
            "A UAV has been deactivated."
        ],
        "testSteps": [
            "1. Activate a UAV.",
            "2. Deactivate the UAV.",
            "3. Wait for the UAV to be deactivated.",
            "4. Verify that all current and scheduled flight plans are canceled.",
            "5. Verify that no new flight plans are being scheduled."
        ],
        "expectedResult": "All current and scheduled flight plans are canceled and no new flight plans are being scheduled",
        "testCaseID": 51,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans"
        ]
    },
    {
        "testObjective": "Verify that the VehicleCore supports virtual UAVs.",
        "preconditions": [
            "The application must be running.",
            "Virtual UAVs are enabled."
        ],
        "testSteps": [
            "1. Enable virtual UAVs in the application.",
            "2. Add a virtual UAV to the system.",
            "3. Perform actions that require virtual UAV functionality."
        ],
        "expectedResult": "The virtual UAV is successfully supported by the VehicleCore.",
        "testCaseID": 52,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall support virtual UAVs"
        ]
    },
    {
        "Requirement": "The VehicleCore shall support UAVs connected via the GCS.",
        "testObjective": "Verify that the VehicleCore supports UAVs connected via the GCS.",
        "preconditions": [
            "The GCS is functioning correctly",
            "The UAVs are registered and have proper authentication"
        ],
        "testSteps": [
            "1. Connect a new UAV to the GCS.",
            "2. Ensure the UAV's connection is stable.",
            "3. Verify the VehicleCore receives and processes the UAV's data."
        ],
        "expectedResult": "The VehicleCore successfully processes data from the connected UAV.",
        "testNotes": "The test environment must ensure stable network conditions and proper authentication for the connected UAVs.",
        "testCaseID": 53,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall support UAVs connected via the GCS"
        ]
    },
    {
        "testObjective": "Verify that when a group of UAVs are assigned flight patterns as part of a mission, the system provides a warning if any paths overlap.",
        "preconditions": [
            "The system must be in a mission state with multiple UAVs assigned to flight patterns.",
            "Flight patterns for each UAV must be defined and operational.",
            "The system has the capability to detect and assess path overlaps between assigned flight patterns."
        ],
        "testSteps": [
            "1. Assign flight patterns to multiple UAVs ensuring that their paths do not overlap.",
            "2. Assign flight patterns to multiple UAVs ensuring that their paths do overlap.",
            "3. Observe the system's warning mechanism to ensure it activates when paths overlap.",
            "4. Deactivate the warning to confirm it is only raised when necessary.",
            "5. Test with additional flight patterns to ensure the warning persists when overlaps occur."
        ],
        "expectedResult": "The system displays a warning message when flight paths overlap and does not display the warning when paths are non-overlapping.",
        "testNotes": "Ensure the warning is clear and provides sufficient detail for troubleshooting.",
        "testCaseID": 54,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap."
        ]
    },
    {
        "testObjective": "Verify that when the SingleUAVFlightPlanScheduler is requested, it aborts the currently executing flight plan of an UAV.",
        "preconditions": [
            "The SingleUAVFlightPlanScheduler must be enabled.",
            "An UAV is currently executing a flight plan."
        ],
        "testSteps": [
            "1. Activate an UAV and start a flight plan.",
            "2. Request the abort from the SingleUAVFlightPlanScheduler.",
            "3. Verify that the current flight plan is aborted.",
            "4. Verify that the next flight plan is executed if available."
        ],
        "expectedResult": "The current flight plan is aborted, and the next flight plan is executed if available.",
        "testDescription": "The test verifies that the SingleUAVFlightPlanScheduler correctly aborts the currently executing flight plan of an UAV and allows the next flight plan to be executed if available.",
        "testNotes": "The test assumes that the SingleUAVFlightPlanScheduler is enabled, and an UAV is currently executing a flight plan. The test verifies that the abort command is processed and that the next flight plan is executed if available.",
        "testCaseID": 55,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV"
        ]
    },
    {
        "testObjective": "Verify that when a UAV reaches the final waypoint of its current flight plan without any pending flight plans, the SingleUAVFlightPlanScheduler notifies the UAV to hover in place.",
        "preconditions": [
            "The UAV has no pending flight plans.",
            "The UAV has reached the final waypoint of its current flight plan.",
            "The SingleUAVFlightPlanScheduler is active."
        ],
        "testSteps": [
            "1. Ensure the UAV has no pending flight plans.",
            "2. Ensure the UAV is at the final waypoint.",
            "3. Activate the SingleUAVFlightPlanScheduler.",
            "4. Observe the notification for hover in place command.",
            "5. Verify the UAV hovers in place.",
            "6. Confirm the notification was sent.",
            "7. Confirm the hover state is maintained."
        ],
        "testCaseID": 56,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place."
        ]
    },
    {
        "testCaseID": 57,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV"
        ]
    },
    {
        "testCaseID": 58,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV."
        ]
    },
    {
        "testObjective": "Verify that when a route is requested to be scheduled the SingleUAVFlightPlanScheduler assigns the route to an active UAV and initiates its execution.",
        "preconditions": [
            "The application must be running.",
            "At least one active UAV exists.",
            "A valid route is provided to the scheduler."
        ],
        "testSteps": [
            "1. Add a new route to the RouteAssignmentUI.",
            "2. Select the route and request scheduling via the SingleUAVFlightPlanScheduler.",
            "3. Wait until the route is assigned and executed by an active UAV.",
            "4. Verify that the route is successfully executed by the assigned UAV."
        ],
        "expectedResult": "The route is successfully scheduled, assigned to an active UAV, and executed without errors.",
        "testCaseID": 59,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution."
        ]
    },
    {
        "testObjective": "Verify that when a mission is currently active the MissionPlanner cancels the active mission.",
        "preconditions": [
            "The system must be running.",
            "A mission is currently active."
        ],
        "testSteps": [
            "1. Activate an existing mission.",
            "2. Request the cancellation of the active mission.",
            "3. Wait until the active mission is canceled."
        ],
        "expectedResult": "The active mission is canceled.",
        "testCaseID": 60,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission."
        ]
    },
    {
        "testObjective": "Verify that the MissionPlanner manages predefined FlightPatterns.",
        "preconditions": [
            "The application must be running.",
            "MissionPlanner is enabled."
        ],
        "testSteps": [
            "1. Define a FlightPattern.",
            "2. Add a mission plan to the MissionPlanner.",
            "3. Observe the FlightPattern being executed."
        ],
        "expectedResult": "FlightPattern is correctly managed and executed as part of the mission plan.",
        "testCaseID": 61,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The MissionPlanner shall manage predefined FlightPatterns"
        ]
    },
    {
        "testObjective": "Verify that when a flight plan is activated for a UAV currently on the ground the FlightSchedulingandExecution notifies the UAV to takeoff vertically until it reaches the prescribed altitude.",
        "preconditions": [
            "The application must be running.",
            "A flight plan is activated for a UAV currently on the ground."
        ],
        "testSteps": [
            "1. Add a flight plan to a UAV that is currently on the ground.",
            "2. Activate the flight plan for the UAV.",
            "3. Observe the FlightSchedulingandExecution notify the UAV to takeoff vertically until it reaches the prescribed altitude.",
            "4. Monitor the UAV's altitude to confirm it reaches the prescribed altitude.",
            "5. Verify that the FlightSchedulingandExecution logs the takeoff notification.",
            "6. Verify that the flight plan's waypoints are executed correctly.",
            "7. Verify that the UAV's state transitions from grounded to taking off to executing waypoints.",
            "8. Verify that the application remains responsive during the entire process."
        ],
        "expectedResult": "The UAV successfully takes off vertically to the prescribed altitude and executes the waypoints as per the flight plan.",
        "testCaseID": 62,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude."
        ]
    },
    {
        "testObjective": "Verify that when a flight plan is active and the hover in place command is rescinded, the FlightManager notifies the UAV to continue to the originally designated waypoint.",
        "preconditions": [
            "Flight plan is active",
            "Hover in place command is issued",
            "UAV is in hover state"
        ],
        "testSteps": [
            "1. Add a flight plan to the UAV. 2. Issue a hover in place command. 3. Rescind the hover in place command. 4. Verify that the FlightManager notifies the UAV to continue to the waypoint.",
            "5. Add another flight plan or modify the existing one. 6. Verify that the FlightManager continues to the waypoint as per the new flight plan."
        ],
        "expectedResult": "The UAV continues to the originally designated waypoint as per the new flight plan.",
        "testCaseID": 63,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint."
        ]
    },
    {
        "testObjective": "Verify that when a flight route is assigned to a hovering UAV the FlightManager maintains hover mode.",
        "preconditions": [
            "The flight route is assigned to a hovering UAV.",
            "The UAV is in hover mode."
        ],
        "testSteps": [
            "1. Add a flight route to a hovering UAV.",
            "2. Ensure the FlightManager assigns the route while maintaining hover.",
            "3. Verify hover state persists after assignment."
        ],
        "expectedResult": "The flight route is assigned and hover mode is maintained.",
        "testCaseID": 64,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode."
        ]
    },
    {
        "testObjective": "Verify that when the hover in place command is issued, the FlightManager halts the UAV in place and maintains its current position.",
        "preconditions": [
            "The application must be running.",
            "A UAV is currently hovering in place."
        ],
        "testSteps": [
            "1. Initiate a hover in place command for a hovering UAV.",
            "2. Observe that the UAV's position remains unchanged.",
            "3. Ensure that the hover in place command is processed without altering the UAV's position.",
            "4. Verify that the flight manager correctly maintains the hover in place state.",
            "5. Confirm that the hover in place command does not trigger any additional movements.",
            "6. Confirm that the flight manager logs the hover in place command action.",
            "7. Ensure that the flight manager maintains the hover in place state until the command is rescinded."
        ],
        "expectedResult": "The UAV remains stationary in place without any movement when the hover command is issued.",
        "testCaseID": 65,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position."
        ]
    },
    {
        "testObjective": "Verify that when given two coordinates the CoordinateSystem computes the direction from the first to the second coordinate.",
        "preconditions": [
            "The application must be running.",
            "Two distinct coordinates are provided."
        ],
        "testSteps": [
            "1. Add the first coordinate.",
            "2. Add the second coordinate.",
            "3. Verify the computed direction is correct."
        ],
        "expectedResult": "The computed direction between the two coordinates is accurate.",
        "testCaseID": 66,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate."
        ]
    },
    {
        "testObjective": "Verify that the CoordinateSystem computes the distance between two coordinates correctly.",
        "preconditions": [
            "Two coordinates must be provided in the correct format."
        ],
        "testSteps": [
            "1. Add the first coordinate.",
            "2. Add the second coordinate.",
            "3. Compute and verify the distance between the two coordinates."
        ],
        "expectedResult": "The distance is correctly computed and returned as a numerical value.",
        "testCaseID": 67,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When given two coordinates the CoordinateSystem shall compute the distance between them."
        ]
    },
    {
        "testObjective": "Verify that when a request is made the CoordinateSystem transforms coordinates to alternate formats.",
        "preconditions": [
            "The application must be running.",
            "A coordinate request must be made."
        ],
        "testSteps": [
            "1. Add a coordinate request.",
            "2. Verify that the CoordinateSystem transforms the coordinates to alternate formats."
        ],
        "expectedResult": "The coordinate request is processed and transformed to alternate formats successfully.",
        "testCaseID": 68,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When requested  the CoordinateSystem shall transform coordinates to alternate formats."
        ]
    },
    {
        "Requirement": "When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude it shall be specified in the flight route.",
        "testObjective": "Verify that when a flight route requires a customized takeoff altitude, the specified altitude is used during takeoff.",
        "preconditions": [
            "The system must be running.",
            "Flight routes with customized takeoff altitudes are created.",
            "A UAV is activated to execute the flight route."
        ],
        "testSteps": [
            "1. Add a flight route with a customized takeoff altitude.",
            "2. Activate a UAV to execute the flight route.",
            "3. Observe the takeoff of the UAV to ensure the specified altitude is used.",
            "4. Verify that the system logs the takeoff successfully.",
            "5. Test the scenario when the takeoff altitude is not specified and use the default.",
            "6. Ensure that any errors in the flight route configuration are logged.",
            "7. Verify that the flight route is correctly updated with the specified altitude after takeoff."
        ],
        "expectedResult": "The UAV takes off at the specified customized altitude, logs the takeoff successfully, and any errors are appropriately logged and handled.",
        "secondaryTestSteps": [
            "1. Add multiple flight routes with varying takeoff altitudes.",
            "2. Activate different UAVs for each flight route.",
            "3. Verify consistent use of each route's specified altitude during takeoff.",
            "4. Test error scenarios with missing takeoff altitude in the flight routes.",
            "5. Ensure logging of all relevant takeoff events with the specified altitude.",
            "6. Verify that the system handles and logs altitude changes correctly.",
            "7. Confirm that the system transitions back to default altitude after takeoff completion."
        ],
        "testCaseID": 69,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route."
        ]
    },
    {
        "testObjective": "Verify that flight routes are persisted correctly between requests.",
        "preconditions": [
            "The system must have at least one flight route defined."
        ],
        "testSteps": [
            "1. Add a new flight route with waypoints and settings.",
            "2. Wait for the flight route to be persisted.",
            "3. Access the flight route storage to retrieve the flight route.",
            "4. Verify the retrieved flight route contains all waypoints and settings.",
            "5. Remove the flight route from storage.",
            "6. Add a new flight route with the same waypoints and settings as the previous one.",
            "7. Verify the new flight route is correctly stored and retrieved.",
            "8. Remove the second flight route from storage.",
            "9. Add a new flight route with different waypoints.",
            "10. Verify the new flight route is correctly stored and retrieved."
        ],
        "expectedResult": "All flight routes are successfully added, stored, retrieved, and removed from storage with correct waypoints and settings.",
        "testNotes": "Ensure that the storage mechanism correctly handles both same and different flight route configurations.",
        "testCaseID": 70,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The FlightRouteManager shall persist flight routes."
        ]
    },
    {
        "testObjective": "Verify that all flight routes created by the FlightRouteManager are valid.",
        "preconditions": [
            "The application must be running.",
            "FlightRouteManager has created at least one flight route."
        ],
        "testSteps": [
            1.1,
            2.2,
            3.3,
            4.4,
            5.5
        ],
        "expectedResult": "All flight routes created by the FlightRouteManager are valid.",
        "testCaseID": 71,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}."
        ]
    },
    {
        "testObjective": "Verify that when a return to home command is issued, the FlightManager returns the UAV to its original launch location without issuing any additional waypoints or routing commands.",
        "preconditions": [
            "The application must be running.",
            "A UAV is selected and is en route to its destination."
        ],
        "testSteps": [
            "1. Select a UAV that is en route to its destination.",
            "2. Issue the return to home command.",
            "3. Wait for the UAV to return to its original launch location.",
            "4. Verify that no additional waypoints or routing commands were issued."
        ],
        "expectedResult": "The UAV is successfully returned to its original launch location without additional commands.",
        "testCaseID": 72,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands."
        ]
    },
    {
        "testCaseID": 73,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect"
        ]
    },
    {
        "testObjective": "Verify that the UAVActivationManager only activates registered UAVs.",
        "preconditions": [
            "The system must have at least one registered UAV.",
            "The activation request must be sent to the UAVActivationManager."
        ],
        "testSteps": [
            "1. Register a UAV with a unique ID.",
            "2. Send an activation request to the UAVActivationManager.",
            "3. Check if the activation is successful.",
            "4. Deactivate the UAV and check if it's inactive.",
            "5. Register another UAV and send an activation request to ensure the first is deactivated.",
            "6. Verify that the first UAV remains inactive."
        ],
        "expectedResult": "The registered UAVs are activated successfully and inactive UAVs are properly deactivated when new activations are requested.",
        "testCaseID": 74,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UAVActivationManager shall only activate UAVs that are registered."
        ]
    },
    {
        "testObjective": "Verify that when a GCS requests activation of a newly detected UAV the GCSMiddleware forwards the request to Dronology.",
        "preconditions": [
            "The GCS must be able to detect a new UAV.",
            "Dronology is available to receive requests.",
            "The GCSMiddleware is configured to forward activation requests."
        ],
        "testSteps": [
            "1. Detect a new UAV.",
            "2. The GCS sends an activation request to the GCSMiddleware.",
            "3. The GCSMiddleware forwards the request to Dronology.",
            "4. Verify that Dronology receives the activation request.",
            "5. Ensure that the detected UAV is activated.",
            "6. Confirm that the activation process is completed successfully."
        ],
        "expectedResult": "The newly detected UAV is successfully activated and the activation request is received by Dronology.",
        "testCaseID": 75,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology."
        ]
    },
    {
        "testObjective": "Verify that when a UAV has an active onboard Obstacle Avoidance system the ObstacleAvoidance system does not issue directives.",
        "preconditions": [
            "The UAV has an active onboard Obstacle Avoidance system."
        ],
        "testSteps": [
            "1. Activate the ObstacleAvoidance system on the UAV.",
            "2. Observe the ObstacleAvoidance system's behavior.",
            "3. Verify that no directives are issued to the UAV."
        ],
        "expectedResult": "The ObstacleAvoidance system does not issue directives when the Obstacle Avoidance system is active on the UAV.",
        "testCaseID": 76,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives"
        ]
    },
    {
        "testObjective": "Verify that the ObjectAvoidance system issues commands only within the capabilities of the UAV.",
        "preconditions": [
            "The system must be running.",
            "An object is present in the vicinity of a UAV.",
            "The UAV has defined capabilities that include issuing certain commands."
        ],
        "testSteps": [
            "1. Initialize the system with a UAV that has defined object avoidance capabilities.",
            "2. Place an object within the vicinity of the UAV.",
            "3. Issue a command to the UAV to avoid the object.",
            "4. Observe whether the UAV issues commands that are within its defined capabilities.",
            "5. Verify that the UAV does not attempt to issue commands beyond its capabilities when the object is present.",
            "6. If the object is removed, verify that the UAV reverts to its default behavior.",
            "7. Repeat with different types of objects and observe consistent behavior.",
            "8. Test edge cases where the object is very close or very far from the UAV.",
            "9. Ensure that the system gracefully handles cases where the object's position relative to the UAV's capabilities changes dynamically."
        ],
        "expectedResult": "The ObjectAvoidance system successfully issues commands only within the defined capabilities of the UAV, avoiding commands that are beyond the UAV's operational limits when an object is present in the vicinity.",
        "testCaseID": 77,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The ObjectAvoidance system only issues commands within the capabilities of the UAV"
        ]
    },
    {
        "testObjective": "Verify that when a UAV takes evasive actions, the system ensures it eventually reaches its destination.",
        "preconditions": [
            "The system must be in a state where a UAV is taking evasive actions."
        ],
        "testSteps": [
            "1. Initiate a scenario where a UAV is taking evasive actions due to an obstacle.",
            "2. Observe if the system triggers the necessary maneuvers to avoid obstacles.",
            "3. Verify that the UAV successfully navigates to its destination without further incident."
        ],
        "expectedResult": "The UAV successfully navigates to its destination after evading obstacles.",
        "testCaseID": 78,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination"
        ]
    },
    {
        "testCaseID": 79,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV"
        ]
    },
    {
        "testObjective": "Verify that the RealTimeFlightUI displays active UAVs as icons on the map.",
        "preconditions": [
            "The application must be running.",
            "At least one active UAV exists."
        ],
        "testSteps": [
            "1. Open the RealTimeFlightUI.",
            "2. Ensure the map is loaded.",
            "3. Verify that active UAVs appear as icons on the map."
        ],
        "expectedResult": "Active UAV icons are displayed on the map.",
        "testCaseID": 80,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The RealTimeFlightUI shall display the location of active UAVs as icons on the map."
        ]
    },
    {
        "testObjective": "Verify that when the RealTimeFlightUI is loaded, a map is displayed.",
        "preconditions": [
            "The application must be running.",
            "The RealTimeFlightUI must be loaded."
        ],
        "testSteps": [
            "1. Load the RealTimeFlightUI.",
            "2. Verify that the map is displayed.",
            "3. Ensure that the map is interactive and displays current locations of UAVs.",
            "4. Check that the map provides necessary information such as flight paths and waypoints."
        ],
        "expectedResult": "The RealTimeFlightUI displays an interactive map showing the current state of the UAVs.",
        "testCaseID": 81,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When the RealTimeFlightUI is loaded  a map shall be displayed."
        ]
    },
    {
        "testObjective": "Verify that when a command is issued by the VaadinUI for an UAV the VaadinUI shall request control of that UAV.",
        "preconditions": [
            "The VaadinUI is enabled.",
            "A UAV is detected by the system."
        ],
        "testSteps": [
            "1. Initiate a command through the VaadinUI.",
            "2. The VaadinUI detects a UAV.",
            "3. The VaadinUI requests control of the detected UAV.",
            "4. The system grants control to the detected UAV."
        ],
        "expectedResult": "The VaadinUI successfully requests control of the detected UAV from the system.",
        "testCaseID": 82,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV."
        ]
    },
    {
        "testCaseID": 83,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall only assign one control-client at a time for each UAV."
        ]
    },
    {
        "testObjective": "Verify that the UIMiddleware provides an interface for registering UI clients.",
        "preconditions": [
            "The application must be running.",
            "There are UI clients to register."
        ],
        "testSteps": [
            "1. Create a new UI client.",
            "2. Register the UI client with the UIMiddleware.",
            "3. Verify that the UI client is successfully registered."
        ],
        "expectedResult": "The UI client is registered and available for use.",
        "testCaseID": 84,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UIMiddleware shall provide an interface for registering UI clients."
        ]
    },
    {
        "testObjective": "Verify that when a UAV's current flight is cancelled, the SingleUAVFlightPlanScheduler cancels all scheduled flight plans for that UAV.",
        "preconditions": [
            "The system has a currently scheduled flight plan for a specific UAV."
        ],
        "testCaseID": 85,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV."
        ]
    },
    {
        "testCaseID": 86,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan."
        ]
    },
    {
        "testObjective": "Verify that when a flight plan is assigned to a UAV that is awaiting execution, the SingleUAVFlightPlanScheduler correctly unassigns the flight plan.",
        "preconditions": [
            "A flight plan is assigned to a UAV.",
            "The UAV is in a state where it is awaiting execution."
        ],
        "testSteps": [
            "1. Add a flight plan to a UAV that is in an awaiting execution state.",
            "2. Assign the flight plan to the UAV.",
            "3. Schedule the execution of the flight plan.",
            "4. Verify that the flight plan is unassigned from the UAV after scheduling."
        ],
        "expectedResult": "The flight plan is successfully unassigned from the UAV after scheduling execution.",
        "testCaseID": 87,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution."
        ]
    },
    {
        "testObjective": "Verify that the SingleUAVFlightPlanScheduler maintains a managed list of pending flight plans for each UAV.",
        "preconditions": [
            "The SingleUAVFlightPlanScheduler must be enabled.",
            "At least one flight plan is registered for a UAV."
        ],
        "testSteps": [
            "1. Add a flight plan to the UAV.",
            "2. Add another flight plan to the same UAV.",
            "3. Verify that the list of pending flight plans for the UAV is updated accordingly.",
            "4. Remove one flight plan from the list.",
            "5. Verify that the list of pending flight plans for the UAV is updated accordingly."
        ],
        "expectedResult": "The SingleUAVFlightPlanScheduler correctly maintains a managed list of pending flight plans for each UAV, reflecting any additions or removals of flight plans.",
        "additionalNotes": "Ensure that the list of pending flight plans is correctly maintained even when multiple flight plans are added or removed simultaneously.",
        "testCaseID": 88,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV."
        ]
    },
    {
        "testObjective": "Verify that when a flight plan is executed the VehicleCore sends the next waypoint to the UAV.",
        "preconditions": [
            "The application must be running.",
            "A flight plan is active for the UAV."
        ],
        "testSteps": [
            "1. Add a flight plan to the UAV.",
            "2. Execute the flight plan.",
            "3. Wait until the next waypoint is sent to the UAV."
        ],
        "expectedResult": "The next waypoint is sent to the UAV after executing the flight plan.",
        "testCaseID": 89,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV."
        ]
    },
    {
        "testObjective": "Verify that waypoints are specified with longitude, latitude, and altitude coordinates.",
        "preconditions": [
            "The application must be running.",
            "Waypoints must be correctly configured."
        ],
        "testSteps": [
            "1. Add a waypoint to the application.",
            "2. Configure the waypoint with longitude, latitude, and altitude coordinates.",
            "3. Verify that the waypoint displays correctly with the specified coordinates."
        ],
        "expectedResult": "The waypoint displays with accurate longitude, latitude, and altitude coordinates.",
        "testCaseID": 90,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude."
        ]
    },
    {
        "testObjective": "Verify that the VehicleCore correctly associates a UAVTYPE with each UAV and accurately captures its basic attributes.",
        "preconditions": [
            "The application must be running.",
            "Each UAV must have its basic attributes recorded."
        ],
        "testSteps": [
            "1. Add a new UAV to the system.",
            "2. Verify that the UAV has been assigned a unique UAVTYPE.",
            "3. Record basic attributes such as weight, battery capacity, and engine type for the UAV.",
            "4. Check that the basic attributes are accurately captured in the VehicleCore.",
            "5. Attempt to add another UAV with different attributes and ensure a new UAVTYPE is assigned."
        ],
        "expectedResult": "Each new UAV is assigned a unique UAVTYPE with accurate basic attributes recorded in the VehicleCore.",
        "testCaseID": 91,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes."
        ]
    },
    {
        "testObjective": "Verify that only one instance of each registered drone is active at any time.",
        "preconditions": [
            "The system must have registered all drones.",
            "At least one active drone exists for each registered drone."
        ],
        "testSteps": [
            "1. Register multiple drones with unique IDs.",
            "2. Activate all drones one by one.",
            "3. Verify that activating a new drone does not activate any previously registered drones.",
            "4. Deactivate a drone.",
            "5. Attempt to activate the deactivated drone again.",
            "6. Verify that only one active drone per unique ID exists."
        ],
        "expectedResult": "Only one active drone instance per unique ID is maintained.",
        "testNotes": "Ensure that the system handles the activation and deactivation correctly without allowing multiple active instances of the same drone.",
        "testCaseID": 92,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time."
        ]
    },
    {
        "testObjective": "Verify that the SingleUAVFlightPlanScheduler executes only one flight plan at a time for each UAV.",
        "preconditions": [
            "The SingleUAVFlightPlanScheduler is enabled",
            "At least one flight plan is assigned to a UAV",
            "The UAV is active and ready for flight"
        ],
        "testSteps": [
            "1. Add a single flight plan to the UAV.",
            "2. Activate the UAV.",
            "3. Add another flight plan to the UAV.",
            "4. Observe the behavior of the SingleUAVFlightPlanScheduler.",
            "5. Verify that only the first flight plan is being executed.",
            "6. Verify that the second flight plan is queued or not executed immediately."
        ],
        "expectedResult": "The SingleUAVFlightPlanScheduler executes only one flight plan at a time for each UAV, ensuring proper scheduling of subsequent plans.",
        "testCaseID": 93,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV."
        ]
    },
    {
        "testObjective": "Verify that the VehicleCore assigns a unique ID to each activated UAV.",
        "preconditions": [
            "The application must be running.",
            "At least two UAVs are activated."
        ],
        "testSteps": [
            "1. Activate the first UAV.",
            "2. Activate the second UAV.",
            "3. Verify that each activated UAV has a unique ID assigned."
        ],
        "expectedResult": "Each activated UAV is assigned a unique ID.",
        "actualResult": "The test will capture whether each activated UAV has a unique ID assigned.",
        "testDescription": "This test case ensures that the VehicleCore correctly assigns unique IDs to each activated UAV, preventing any conflicts or overlaps in their identification.",
        "testCaseID": 94,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. The VehicleCore shall assign a unique ID to each activated UAV."
        ]
    },
    {
        "testObjective": "Verify that when a client registers for notifications the UIMiddleware sends notifications for specific events.",
        "preconditions": [
            "The application must be running.",
            "A client must have registered for notifications."
        ],
        "testSteps": [
            "1. Add a client that has registered for notifications.",
            "2. Initiate a specific event that triggers a notification.",
            "3. Verify that the notification is sent to the client's registered email.",
            "4. Verify that the notification includes the specific event details.",
            "5. Verify that the notification system correctly handles multiple events at once.",
            "6. Verify that the notification system deactivates all associated events after completion.",
            "7. Verify that the notification system correctly reactivates events upon client request.",
            "8. Verify that the notification system logs all notification events and their corresponding client IDs.",
            "9. Verify that the notification system provides an option to suppress notifications for certain events.",
            "10. Verify that the notification system allows filtering of notifications based on event type or client ID."
        ],
        "testCaseID": 95,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. If a client registers for notifications  the UIMiddleware shall send notifications for specific events"
        ]
    },
    {
        "testObjective": "Verify that when a request is made, the VehicleCore transitions a UAV between states according to the allowed state transitions as depicted in the UAV state transition diagram.",
        "preconditions": [
            "The application must be running.",
            "A request must be present."
        ],
        "testSteps": [
            "1. Add a request to the application.",
            "2. Verify that the VehicleCore processes the request.",
            "3. Observe the UAV's state transition from the initial state to the target state.",
            "4. Confirm that the transition followed the allowed state transitions as depicted in the diagram."
        ],
        "expectedResult": "The UAV transitions between states according to the allowed transitions as depicted in the diagram.",
        "testCaseID": 96,
        "prompt": [
            "Imagine three expert software testers for Unmanned Aerial Systems (UAS). All experts receive the same software requirement and define a test description. All experts will write down 1 step of their thinking then share it with the group. Then all experts will go on to the next step, etc. If any expert realizes they are wrong at any point they leave.",
            "Respond in json.\n\nEXAMPLE INPUT REQUIREMENT:\nWhen a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n\nEXAMPLE JSON OUTPUT:\n{\n    \"Requirement\": \"When a user cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\",\n    \"testObjective\": \"Verify that when a user cancels a pending flight plan the RouteAssignmentUI notifies Dronology.\",\n    \"preconditions\": [\n        \"The application must be running.\",\n        \"One or more flight plans are pending.\"\n    ],\n    \"testSteps\": [\n        \"1. Add one or more flight plans.\",\n        \"2. As a user cancel a flight plan.\",\n        \"3. Wait until RouteAssignmentUI notifies Dronology.\"\n    ],\n    \"expectedResult\": \"Flight plan is canceled and Dronology received notification from RouteAssignmentUI.\"\n}",
            "These are all the software requirements for the system:\n\n1. The MapComponent shall support different types of map layers (e.g.  terrain  satellite)\n2. The MissionPlanner shall execute flight plans for multiple UAVs concurrently.\n3. The GCS shall transmit the UAV's properties to the GCSMiddleware\n4. The GCS shall transmit the UAV's current location to the GCSMiddleware\n5. The GCS shall report newly connected UAVs to the GCSMiddleware.\n6. The GCS shall assign a message frequency for all UAVs.\n7. When the GCS receives a UAV command from the GCSMiddleware  the GCS shall forward the command to the respective UAV.\n8. When the connection to the GCS from the GCSMiddleware is lost  the GCSMiddleware shall notify Dronology and deactivate all associated UAVs.\n9. The GCSMiddleware shall forward commands sent from Dronology to a GCS\n10. The GCSMiddleware shall handle state messages   monitoring messages  and mode change messages  received from an GCS.\n11. The GCSMiddleware  shall follow a predefined set of steps to establish a connection between a GCS and Dronology\n12. The GCSMiddleware shall handle multiple GCS\n13. The DronologyRuntimeMonitor shall be able to receive messages from any Dronology component\n14. When a new monitoring message is received the DronologyRuntimeMonitor shall forward the message to all subscribed clients\n15. The DronologyRuntimeMonitor shall provide functionality to retrieve monitoring messages and distribute them to clients\n16. The RealTimeFlightUI shall notify users when an emergency occurs.\n17. The RealTimeFlightUI shall allow users to follow one or multiple UAVs on the map.\n18. The RealTimeFlightUI shall allow users to perform emergency operations (e.g. hovering multiple UAVs  sending multiple UAVs to home) to a group of UAVs\n19. The RealTimeFlightUI shall allow users to apply flight operations to one or more selected UAVs.\n20. The RealTimeFlightUI shall display all currently active flight plans on the map.\n21. The RealTimeFlightUI shall display the name and status of all currently activated UAVs\n22. When the RouteCreationUI is loaded a list of all existing routes shall be displayed.\n23. The RouteCreationUI shall allow a user to delete a route.\n24. The RouteCreationUI shall allow the user to create and modify a route.\n25. When requested  the RouteCreationUI shall send a newly created or modified route to dronology.\n26. Each route shall include a unique ID  a textual description  and a set of waypoints  all of which are editable in the UI.\n27. The RouteCreationUI shall only accept valid altitude and speed values for waypoint.\n28. The RouteCreationUI shall distinguish between starting  ending  and intermediate waypoint markers.\n29. When a user  cancels a pending flight plan the RouteAssignmentUI shall notify Dronology.\n30. A user may reorder routes or remove flight plans assigned to a UAV as long as the flight has not started execution.\n31. When a UAV is selected  the RouteAssignmentUI shall display its active flight plans.\n32. When requested by the user  the RouteAssignmentUI shall display details about the selected UAV and its flight plans.\n33. When a route is assigned or removed from a UAV  the RouteAssignmentUI shall notify Dronology.\n34. The RouteAssignmentUI shall provide means to select an existing routes and assign them to a UAV.\n35. When loading the map view it shall be positioned at the pre-defined location\n36. When the VaadinUI is activated  the VaadinUI shall be configured according to stored configuration parameters.\n37. The UIMiddleware shall accept and activate a mission plan upon request.\n38. The UIMiddleware shall enable an existing route to be assigned to an active UAV.\n39. The UIMiddleware shall enable the creation and modification of flight routes\n40. The UIMiddleware accepts commands from UIs and forwards to Dronology\n41. The UIMiddleware shall provide a list of all existing routes\n42. The UIMiddleware shall provide a list of all active UAVs\n43. The ActivityLogger shall log all commands sent to and messages received from a CGS.\n44. The ActivityLogger shall log all flight plan related events.\n45. The InternalSimulator shall approximate the state of the battery\n46. When given a landing command the InternalSimulator shall move the UAV from to the ground altitude corresponding to its current longitude and latitude.\n47. When given a goto command  the InternalSimulator shall update the location of the UAV at increments of {{SIMULATIONSTEPSIZE}} meters  moving it towards the target destination until the destination is reached.\n48. When given a takeoff command the InternalSimulator shall move the UAV to the takeoff altitude corresponding to its current longitude and latitude.\n49. The InternalSimulator shall approximate the behavior of a UAV.\n50. The UAVRegistrationManager shall store UAV meta-data information  such as the UAV's technical characteristics\n51. When the maximum numbers of allowed activated UAVs has been reached  the UAVActivationManager shall reject any further activation requests.\n52. When a UAV is deactivated the UAVActivationManager shall cancel all current and scheduled flight plans\n53. The VehicleCore shall support virtual UAVs\n54. The VehicleCore shall support UAVs connected via the GCS\n55. When a group of UAVs are assigned flight patterns as part of a mission  the system shall provide a warning if any paths overlap.\n56. If requested  the SingleUAVFlightPlanScheduler shall abort the currently executing flight plan of an UAV\n57. If a UAV does not have any pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall notify the UAV to hover in place.\n58. If a scheduled flight is not manually assigned to a UAV  the SingleUAVFlightPlanScheduler shall assign the route automatically to an UAV\n59. If a route contains a specific {{UAVID}}  the SingleUAVFlightPlanScheduler shall assign the route to the given UAV.\n60. When requested  the SingleUAVFlightPlanScheduler shall schedule a route for execution.\n61. When requested  if a mission is currently active  the MissionPlanner shall cancel the active mission.\n62. The MissionPlanner shall manage predefined FlightPatterns\n63. When a flight plan is activated for a UAV currently on the ground  the FlightSchedulingandExecution shall notify the UAV to takeoff vertically until it reaches the prescribed altitude.\n64. If a flight plan is active and the hover in place command is rescinded  the FlightManager shall notify the UAV to continue to the originally designated waypoint.\n65. If a flight route is assigned to a UAV which is currently hovering in place  the FlightManager shall assign the route and maintain the hover in place mode.\n66. When the hover in place command is issued  the FlightManager shall halt the UAV in place and maintain its current position.\n67. When given two coordinates the CoordinateSystem shall compute the direction from the first coordinate to the second coordinate.\n68. When given two coordinates the CoordinateSystem shall compute the distance between them.\n69. When requested  the CoordinateSystem shall transform coordinates to alternate formats.\n70. When a flight route requires a customized takeoff altitude that differs from the system's default takeoff altitude  it shall be specified in the flight route.\n71. The FlightRouteManager shall persist flight routes.\n72. The FlightRouteManager shall ensure that all flight routes represent a {{VALIDFLIGHTROUTE}}.\n73. When the return to home command is issued  the FlightManager shall return the UAV to its original launch location without issuing any additional waypoint or routing commands.\n74. When the GCS loses the connection to an UAV  the GCS shall attempt to reconnect\n75. The UAVActivationManager shall only activate UAVs that are registered.\n76. When a GCS requests activation of a newly detected UAV  the GCSMiddleware shall forward the request to Dronology.\n77. When a UAV has an active onboard Obstacle Avoidance  then the ObstacleAvoidance system shall not issue directives\n78. The ObjectAvoidance system only issues commands within the capabilities of the UAV\n79. If a UAV takes evasive actions the system will ensure that it will eventually reach its destination\n80. When a stationary or moving object is within the proximity of a UAV the ObjectAvoidance system shall issue evasive directives to the UAV\n81. The RealTimeFlightUI shall display the location of active UAVs as icons on the map.\n82. When the RealTimeFlightUI is loaded  a map shall be displayed.\n83. If a command is issued by the VaadinUI for an UAV  the VaadinUI shall request control of that UAV.\n84. The UIMiddleware shall only assign one control-client at a time for each UAV.\n85. The UIMiddleware shall provide an interface for registering UI clients.\n86. When a UAV's current flight is cancelled  the SingleUAVFlightPlanScheduler shall in turn cancel all scheduled flight plans for that UAV.\n87. If a UAV has pending flight plans  then when it reaches the final waypoint of its current flight plan  the SingleUAVFlightPlanScheduler shall execute the next assigned flight plan.\n88. If requested  the SingleUAVFlightPlanScheduler shall unassign the flight plan assigned to a UAV that is awaiting execution.\n89. The SingleUAVFlightPlanScheduler shall maintain a managed list of pending flight plans for Each UAV.\n90. When a flight plan is executed  the VehicleCore shall send the next waypoint to the UAV.\n91. Each waypoint shall be specified using coordinates that include longitude  latitude  and altitude.\n92. The VehicleCore shall associate a {{UAVTYPE}} for each UAV defining its basic attributes.\n93. The UAVActivationManager shall ensure that only one instance of each registered drone is active at any time.\n94. The SingleUAVFlightPlanScheduler shall only execute one flight plan at a time for each UAV.\n95. The VehicleCore shall assign a unique ID to each activated UAV.\n96. If a client registers for notifications  the UIMiddleware shall send notifications for specific events\n97. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram",
            "The experts shall generate json test description for the following requirement. When requested  the VehicleCore shall shall transition the UAV between states according to allowed state transitions as depicted in the UAV state transition diagram"
        ]
    }
]